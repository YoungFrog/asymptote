/*****
 * runtime.in
 * Tom Prince 2005/4/15
 *
 * Generate runtime functions.
 *
 *****/

void     => primVoid()
int      => primInt()
bool     => primBoolean()
double   => primReal()
string*  => primString()
string   => primString() 
pen      => primPen()
pair     => primPair()
triple   => primTriple()
path     => primPath()
guide*   => primGuide()
file*    => primFile()
picture* => primPicture()
transform => primTransform()
callable* => voidFunction()
runnable* => primCode()
intarray*  => intArray()
realarray* => realArray()
pairarray* => pairArray()
boolarray* => boolArray()
stringarray* => stringArray()
triplearray* => tripleArray()

#include <cfloat>
#include "angle.h"
#include "pair.h"
#include "triple.h"
#include "transform.h"
#include "path.h"
#include "pen.h"
#include "guide.h"
#include "picture.h"
#include "drawpath.h"
#include "drawfill.h"
#include "drawclipbegin.h"
#include "drawclipend.h"
#include "drawlabel.h"
#include "drawverbatim.h"
#include "drawgsave.h"
#include "drawgrestore.h"
#include "drawlayer.h"
#include "drawimage.h"
#include "drawgroup.h"
#include "fileio.h"
#include "genv.h"
#include "builtin.h"
#include "texfile.h"
#include "pipestream.h"
#include "parser.h"
#include "stack.h"
#include "util.h"
#include "mathop.h"
#include "callable.h"
#include "stm.h"
  
#ifdef HAVE_LIBFFTW3
#include "fftw++.h"
#endif
  
using namespace vm;
using namespace camp;
using namespace settings;

namespace run {
using camp::pair;
using mem::string;
using vm::array;
using vm::frame;
using absyntax::runnable;

callable *atExitFunction=NULL;
callable *atDrawFunction=NULL;
  
typedef array intarray;
typedef array realarray;
typedef array pairarray;
typedef array boolarray;
typedef array stringarray;
typedef array triplearray;
}

using vm::array;
using types::function;
using types::primVoid;
using types::primBoolean;
using types::primInt;
using types::primReal;
using types::primPair;
using types::primTriple;
using types::primPen;
using types::primPath;
using types::primPicture;
using types::primString;
using types::primCode;
using types::primFile;
using types::primTransform;
using types::boolArray;
using types::intArray;
using types::realArray;
using types::pairArray;
using types::tripleArray;
using types::stringArray;

namespace loop {
  void doIRunnable(absyntax::runnable *r, bool embedded=false);
  void doITree(absyntax::block *tree, bool embedded=false);
}
  
function *voidFunction()
{
  function *ft = new function(primVoid());
  return ft;
}

namespace run {
  
static inline int Round(double x) 
{
  return int(x+((x >= 0) ? 0.5 : -0.5));
}

inline int sgn(double x) 
{
  return (x > 0.0 ? 1 : (x < 0.0 ? -1 : 0));
}

inline void CheckReallocate(double *& A, size_t n, size_t& old)
{
  if(n > old) {delete A; A=new double[n]; old=n;}
}

inline void CheckReallocate(double *& A, double *& B, size_t n, size_t& old)
{
  if(n > old) {delete A; A=new double[n]; delete B; B=new double[n]; old=n;}
}

void outOfBounds(const char *op, size_t len, int n)
{
  ostringstream buf;
  buf << op << " array of length " << len << " with out-of-bounds index "
      << n;
  error(buf.str().c_str());
}

array *copyArray(array *a)
{
  checkArray(a);
  size_t size=a->size();
  array *c=new array(size);
  for(size_t i=0; i < size; i++) 
    (*c)[i]=(*a)[i];
  return c;
}

array *copyArray2(array *a)
{
  checkArray(a);
  size_t size=a->size();
  array *c=new array(size);
  for(size_t i=0; i < size; i++) {
    array *ai=read<array*>(a,i);
    checkArray(ai);
    size_t aisize=ai->size();
    array *ci=new array(aisize);
    (*c)[i]=ci;
    for(size_t j=0; j < aisize; j++) 
      (*ci)[j]=(*ai)[j];
  }
  return c;
}

item& arrayRead(array *a, int n)  
{
  checkArray(a);
  size_t len=a->size();
  bool cyclic=a->cyclic();
  if(cyclic && len > 0) n=imod(n,len);
  else if(n < 0 || n >= (int) len) outOfBounds("reading",len,n);
  return (*a)[(unsigned) n];
}

default_t def;

}

// Autogenerated routines are specified like this:
// 
// type asyname:cname(cparams)
// {
//   C code
// }



// Initializers

int :intZero()
{
  return 0;
}

double :realZero()
{
  return 0.0;
}

bool :boolFalse()
{
  return false;
}

array *:pushNullArray()
{
  return 0;
}

frame *:pushNullRecord()
{
  return 0;
}

item :pushNullFunction()
{
  return nullfunc::instance();
}


// Default operations

// Put the default value token on the stack (in place of an argument when
// making a function call).
item :pushDefault()
{
  return def;
}


// Test if the value on the stack is the default value token.
bool :isDefault(item i)
{
  return isdefault(i);
}


// Logical operations

bool !(bool b)
{
  return !b;
}

bool ^(bool a, bool b)
{
  return a^b ? true : false;
}

bool ==(file *a, file *b)
{
  return a == b;
}

bool !=(file *a, file *b)
{
  return a != b;
}

bool ==(transform a, transform b)
{
  return a == b;
}

bool !=(transform a, transform b)
{
  return a != b;
}

bool :boolMemEq(frame *a, frame *b)
{
  return a == b;
}

bool :boolMemNeq(frame *a, frame *b)
{
  return a != b;
}

bool :boolFuncEq(callable *a, callable *b)
{
  return a->compare(b);
}

bool :boolFuncNeq(callable *a, callable *b)
{
  return !(a->compare(b));
}


// Casts

guide *:pairToGuide(pair z) 
{
  return new pairguide(z);
}


guide *:pathToGuide(path p) 
{
  return new pathguide(p);
}


path :guideToPath(guide *g) 
{
  return g->solve();
}


// Picture operations

void _label(picture *pic, string *s, string *size, double r, pair z, pair a,
     	    pair scale, pen p)
{
  pic->append(new drawLabel(*s,*size,r,z,a,scale,p));
}

bool labels(picture *pic)
{
  return pic->havelabels();
}


// Pen operations

// Reset the meaning of pen default attributes.
void resetdefaultpen()
{
  defaultpen=camp::pen::startupdefaultpen();
}

void defaultpen(pen p)
{
  defaultpen=pen(resolvepen,p);
}

pen defaultpen()
{
  return defaultpen;
}

pen invisible()
{
  return pen(invisiblepen);
}

pen gray(pen p)
{
  if(p.rgb()) p.rgbtogrey();
  else if (p.cmyk()) p.cmyktogrey();
  return p;
}

pen rgb(pen p)
{
  if(p.grayscale()) p.greytorgb();
  else if (p.cmyk()) p.cmyktorgb();
  return p;
}

pen rgb(double r, double g, double b)
{
  return pen(r,g,b);
}

pen cmyk(double c, double m, double y, double k)
{
  return pen(c,m,y,k);  
}

pen gray(double gray)
{
  return pen(gray);
}

realarray *colors(pen p)
{  
  int n=ColorComponents[p.colorspace()];
  array *a=new array(n);
  
  switch(n) {
  case 0:
    break;
  case 1: 
    (*a)[0]=p.gray(); 
    break;
  case 3:
    (*a)[0]=p.red(); 
    (*a)[1]=p.green(); 
    (*a)[2]=p.blue(); 
    break;
  case 4:
    (*a)[0]=p.cyan();
    (*a)[1]=p.magenta(); 
    (*a)[2]=p.yellow(); 
    (*a)[3]=p.black();
    break;
  default:
    break;
  }
  return a;
}

pen pattern(string *s)
{
  return pen(setpattern,*s);
}

string pattern(pen p)
{
  return p.fillpattern();  
}

pen fillrule(int n)
{
  return pen(n >= 0 && n < nFill ? (FillRule) n : DEFFILL);
}

int fillrule(pen p)
{
  return p.Fillrule();  
}

pen linetype(string *s, bool scale)
{
  return pen(LineType(*s,scale)); 
}

string linetype(pen p)
{
  return p.stroke();  
}

pen linecap(int n)
{
  return pen(setlinecap,n >= 0 && n < nCap ? n : DEFCAP);
}

int linecap(pen p)
{
  return p.cap();  
}

pen linejoin(int n)
{
  return pen(setlinejoin,n >= 0 && n < nJoin ? n : DEFJOIN);
}

int linejoin(pen p)
{
  return p.join();  
}

pen linewidth(double x)
{
  return pen(setlinewidth,x >= 0.0 ? x : DEFWIDTH);
}

double linewidth(pen p)
{
  return p.width();  
}

pen fontcommand(string *s)
{
  return pen(setfont,*s);
}

string font(pen p)
{
  return p.Font();
}

pen fontsize(double size, double skip)
{
  return pen(setfontsize,size > 0.0 ? size : 0.0,
	     skip > 0.0 ? skip : 0.0);
}

double fontsize(pen p)
{
  return p.size();
}

double lineskip(pen p)
{
  return p.Lineskip();  
}

pen overwrite(int n)
{
  return pen(setoverwrite,n >= 0 && n < nOverwrite ? (overwrite_t) n :
	     DEFWRITE);
}

int overwrite(pen p)
{
  return p.Overwrite();  
}

pen basealign(int n)
{
  return pen(n >= 0 && n < nBaseLine ? (BaseLine) n : DEFBASE);
}

int basealign(pen p)
{
  return p.Baseline();
}

path nib(pen p)
{
  static path nullpath;
  path *g=p.Path();
  return g ? *g : nullpath;
}

pen makepen(path p)
{
  return p.size() == 0 ? pen() : pen(new path(p));
}

void _draw(picture *pic, path p, pen n)
{
  pic->append(new drawPath(p,n));
}

void endclip(picture *pic)
{
  pic->append(new drawClipEnd(false));
}

void gsave(picture *pic)
{
  pic->append(new drawGsave());
}

void grestore(picture *pic)
{
  pic->append(new drawGrestore());
}

void begingroup(picture *pic)
{
  pic->append(new drawBegin());
}

void endgroup(picture *pic)
{
  pic->append(new drawEnd());
}

void add(picture *to, picture *from)
{
  to->add(*from);
}

void prepend(picture *to, picture *from)
{
  to->prepend(*from);
}

string fileprefix()
{
  return outname;
}


// Interactive mode

bool interact()
{
  return interact::interactive;
}

void uptodate(bool b)
{
  interact::uptodate=b;
}

bool uptodate()
{
  return interact::uptodate;
}


// System commands

int system(string *str)
{
  if(safe) error("system() call disabled; override with option -unsafe");
  else return System(str->c_str());
}

void abort(string *msg)
{
  error(msg->c_str());
}

void _eval(string *s, bool embedded=false)
{
  loop::doITree(parser::parseString(*s),embedded);
}

void _eval(runnable *s, bool embedded=false)
{
  loop::doIRunnable(s,embedded);
}

void readGUI()
{
  static bool first=true;
  string name=buildname(outname,"gui");
  std::ifstream exists(name.c_str());
  if(exists) {
    if((settings::clearGUI && !interact::interactive) ||
       (first && interact::interactive)) unlink(name.c_str());
    else {
      if (!settings::ignoreGUI) {
	string cmd=string("include \"")+name+string("\";");
	absyntax::block *ast = parser::parseString(cmd);
	loop::doITree(ast,true);
      }
    }
  }
  first=false;
}


// Path operations

pair point(path p, int n)
{
  return p.point(n);
}

pair point(path p, double t)
{
  return p.point(t);
}

pair precontrol(path p, int n)
{
  return p.precontrol(n);
}

pair precontrol(path p, double t)
{
  return p.precontrol(t);
}

pair postcontrol(path p, int n)
{
  return p.postcontrol(n);
}

pair postcontrol(path p, double t)
{
  return p.postcontrol(t);
}

pair dir(path p, int n)
{
  return unit(p.direction(n));
}

pair dir(path p, double t)
{
  return unit(p.direction(t));
}

path reverse(path p)
{
  return p.reverse();
}

path subpath(path p, int b, int e)
{
  return p.subpath(b,e);
}

path subpath(path p, double b, double e)
{
  return p.subpath(b,e);
}

int length(path p)
{
  return p.length();
}

bool cyclic(path p)
{
  return p.cyclic();
}

bool straight(path p, int i)
{
  return p.straight(i);
}

double arclength(path p)
{
  return p.arclength();
}

double arctime(path p, double dval)
{
  return p.arctime(dval);
}

double dirtime(path p, pair z)
{
  return p.directiontime(z);
}

pair intersect(path x, path y, double fuzz)
{
  return intersectiontime(x,y,fuzz);
}

double relativedistance(double theta, double phi, double t, bool atleast)
{
  return camp::velocity(theta,phi,tension(t,atleast));
}


// String operations

int length(string *s)
{
  return (int) s->length();
}

int find(string *s, string *sub, int pos)
{
  return (int) s->find(*sub,pos);
}

int rfind(string *s, string *sub, int pos)
{
  return (int) s->rfind(*sub,pos);
}

string reverse(string s)
{
  reverse(s.begin(),s.end());
  return s;
}

string insert(string s, int pos, string *sub)
{
  if ((size_t)pos < s.length())
    return s.insert(pos,*sub);
  return s;
}

string substr(string* s, int pos, int n)
{
  if ((size_t)pos < s->length())
    return s->substr(pos,n);
  return ""; // TODO: Make this shared again.
}

string erase(string s, int pos, int n)
{
  if ((size_t)pos < s.length())
    return s.erase(pos,n);
  return s; 
}

void gui(double x)
{ 
  settings::deconstruct=(x > 0 ? x : 0);
}


// Math

double ^(double x, int y)
{
  return pow(x,y);
}

int quotient(int x, int y)
{ 
  if (y == 0) dividebyzero();
// Implementation-independent definition of integer division: round down
  return (x-portableMod(x,y))/y;
}  

int abs(int x)
{ 
  return abs(x);
}  

int sgn(double x)
{ 
  return sgn(x);
}  

int rand()
{ 
  return rand();
}  

void srand(int seed)
{ 
  srand(seed);
}  

void srand(int seed)
{ 
  srand(seed);
}  

int ceil(double x)
{ 
  double y=ceil(x);
  checkint(y,0);
  return (int) y;
}

int floor(double x)
{ 
  double y=floor(x);
  checkint(y,0);
  return (int) y;
}

int round(double x)
{ 
  if(fabs(x) >= INT_MAX+0.5) integeroverflow(0);
  return Round(x);
}

int Ceil(double x)
{ 
  return Ceil(x);
}

int Floor(double x)
{ 
  return Floor(x);
}

int Round(double x)
{ 
  return Round(intcap(x));
}

double fmod(double x, double y)
{
  if (y == 0.0) dividebyzero();
  return fmod(x,y);
}

double atan2(double y, double x)
{ 
  return atan2(y,x);
}  

double hypot(double x, double y)
{ 
  return hypot(x,y);
}  

double remainder(double x, double y)
{ 
  return remainder(x,y);
}  

double J(int n, double x)
{
  return jn(n,x);
}

double Y(int n, double x)
{
  return yn(n,x);
}

double erf(double x)
{
  return erf(x);
}

double erfc(double x)
{
  return erfc(x);
}

double gamma(double x)
{
#ifdef HAVE_TGAMMA
  return tgamma(x);
#else
 double lg = lgamma(x);
 return signgam*exp(lg);
#endif
}

realarray *quadraticroots(double a, double b, double c)
{
  quadraticroots q(a,b,c);
  array *roots=new array(q.roots);
  if(q.roots >= 1) (*roots)[0]=q.t1;
  if(q.roots == 2) (*roots)[1]=q.t2;
  return roots;
}

realarray *cubicroots(double a, double b, double c, double d)
{
  cubicroots q(a,b,c,d);
  array *roots=new array(q.roots);
  if(q.roots >= 1) (*roots)[0]=q.t1;
  if(q.roots >= 2) (*roots)[1]=q.t2;
  if(q.roots == 3) (*roots)[2]=q.t3;
  return roots;
}

  
// Transforms

transform operator *(transform a, transform b)
{
  return a*b;
}

pair operator *(transform t, pair z)
{
  return t*z;
}

path operator *(transform t, path g)
{
  return transformed(t,g);
}

pen operator *(transform t, pen p)
{
  return transformed(&t,p);
}

picture * operator *(transform t, picture *p)
{
  return transformed(t,p);
}

transform ^(transform t, int n)
{
  transform T;
  if(n < 0) {
    n=-n;
    t=inverse(t);
  }
  for(int i=0; i < n; i++) T=T*t;
  return T;
}

double :transformXPart(transform t)
{
  return t.getx();
}

double :transformYPart(transform t)
{
  return t.gety();
}

double :transformXXPart(transform t)
{
  return t.getxx();
}

double :transformXYPart(transform t)
{
  return t.getxy();
}

double :transformYXPart(transform t)
{
  return t.getyx();
}

double :transformYYPart(transform t)
{
  return t.getyy();
}

transform :real6ToTransform(double x, double y, double xx, double xy,
			    double yx, double yy)
{
  return transform(x,y,xx,xy,yx,yy);
}

transform identity:transformIdentity()
{
  return identity();
}

transform inverse(transform t)
{
  return inverse(t);
}

transform shift(pair z)
{
  return shift(z);
}

transform xscale(double x)
{
  return xscale(x);
}

transform yscale(double y)
{
  return yscale(y);
}

transform scale(double x)
{
  return scale(x);
}

transform slant(double s)
{
  return slant(s);
}

transform rotate(double angle, pair z=0)
{
  return rotatearound(z,radians(angle));
}

transform reflect(pair a, pair b)
{
  return reflectabout(a,b);
}


// Pair operations

pair :pairZero()
{
  static pair zero;
  return zero;
}

pair :realRealToPair(double x, double y)
{
  return pair(x,y);
}

pair :pairNegate(pair z)
{
  return -z;
}

double :pairXPart(pair z)
{
  return z.getx();
}

double :pairYPart(pair z)
{
  return z.gety();
}

double length(pair z)
{
  return z.length();
}

double abs(pair z)
{
  return z.length();
}

double angle(pair z)
{
  return z.angle();
}

// Return the angle of z in degrees in the interval [0,360).
double degrees(pair z)
{
  double deg=degrees(z.angle());
  if(deg < 0) deg += 360; 
  return deg;
}

pair unit(pair z)
{
  return unit(z);
}

pair dir(double theta)
{
  return expi(radians(theta));
}

pair expi(double theta)
{
  return expi(theta);
}

pair conj(pair z)
{
  return conj(z);
}

double _dot(pair u, pair v) 
{
  return u.getx()*v.getx()+u.gety()*v.gety();
}


// Triple operations

triple :tripleZero()
{
  static triple zero;
  return zero;
}

triple :realRealRealToTriple(double x, double y, double z)
{
  return triple(x,y,z);
}

double :tripleXPart(triple v)
{
  return v.getx();
}

double :tripleYPart(triple v)
{
  return v.gety();
}

double :tripleZPart(triple v)
{
  return v.getz();
}

triple operator *(double x, triple v)
{
  return x*v;
}

triple operator *(triple v, double x)
{
  return x*v;
}

triple /(triple v, double x)
{
  return v/x;
}

double length(triple v)
{
  return v.length();
}

double abs(triple v)
{
  return v.length();
}

double polar(triple v) 
{
  return v.polar();
}

double azimuth(triple v) 
{
  return v.azimuth();
}

double colatitude(triple v) 
{
  return degrees(v.polar());
}

double latitude(triple v) 
{
  return 90.0-degrees(v.polar());
}

double longitude(triple v) 
{
  double deg=degrees(v.azimuth());
  if(deg < 0) deg += 360; 
  return deg;
}

triple unit(triple v) 
{
  return unit(v);
}

double dot(triple u, triple v) 
{
  return u.getx()*v.getx()+u.gety()*v.gety()+u.getz()*v.getz();
}

triple cross(triple u, triple v) 
{
  return triple(u.gety()*v.getz()-u.getz()*v.gety(),
		u.getz()*v.getx()-u.getx()*v.getz(),
		u.getx()*v.gety()-v.getx()*u.gety());
}

triple expi(double theta, double phi)
{
  return expi(theta,phi);
  double sintheta=sin(theta);
  return triple(sintheta*cos(phi),sintheta*sin(phi),cos(theta));
}

triple dir(double theta, double phi)
{
  return expi(radians(theta),radians(phi));
}

double cubiclength(triple z0, triple z0p, triple z1m, triple z1, double goal)
{
  return cubiclength(z0,z0p,z1m,z1,goal);
}

pair intersect(triplearray* pre1, triplearray* point1, triplearray* post1,
               triplearray* pre2, triplearray* point2, triplearray* post2,
	       double fuzz)
{
  size_t size1=pre1->size();
  size_t size2=pre2->size();
      
  if(point1->size() != size1 || post1->size() != size1 ||
     point2->size() != size2 || post2->size() != size2)
    error("Mismatched array lengths");
  
  int single1=(size1 == 1);
  int single2=(size2 == 1);
  
  size_t Size1=size1+single1;
  size_t Size2=size2+single2;
  
  node *n1=new node[Size1];
  node *n2=new node[Size2];
      
  for(size_t i=0; i < size1; ++i)
    n1[i]=node(read<triple>(pre1,i),read<triple>(point1,i),
	       read<triple>(post1,i));

  for(size_t i=0; i < size2; ++i)
    n2[i]=node(read<triple>(pre2,i),read<triple>(point2,i),
	       read<triple>(post2,i));

  if(single1) n1[1]=n1[0];
  if(single2) n2[1]=n2[0];
  
  return intersect((int) Size1-1,(int) Size2-1,n1,n2,fuzz);
}

// Constants


double pi()
{ 
  return PI;
}

int intMax()
{ 
  return INT_MAX;
}

double infinity()
{ 
  return HUGE_VAL;
}  

double realMax()
{ 
  return DBL_MAX;
}

double realMin()
{ 
  return DBL_MIN;
}  

double realEpsilon()
{ 
  return DBL_EPSILON;
}  

double randMax()
{ 
  return RAND_MAX;
}


// System routines

string VERSION()
{
  return VERSION;
}

void quiet(bool v)
{
  settings::view=!v;
}

void atexit(callable *f)
{
  atExitFunction=f;
}

callable *atexit()
{
  return atExitFunction;
}


// Merge output files  
int merge(stringarray *files, string *args, string *format, bool keep)
{
  int ret;
  
  checkArray(files);
  size_t size=files->size();
  
  if(!checkFormatString(*format)) return;
  
  ostringstream cmd,remove;
  cmd << Convert << " "+*args;
  
  for(size_t i=0; i < size; i++) 
    cmd << " " << read<string>(files,i);
  
  string name=buildname(outname,format->c_str());
  cmd << " " << name;
  ret=System(cmd,false,true,"ASYMPTOTE_CONVERT","convert");
  
  if(ret == 0)
    if(settings::verbose > 0) cout << "Wrote " << name << endl;
  
  if(!keep && !settings::keep)
    for(size_t i=0; i < size; i++) 
      unlink(read<string>(files,i).c_str());
    
  if(ret == 0 && settings::view) {
    ostringstream cmd;
    cmd << Animate << " " << name;
    System(cmd,false,false,"ASYMPTOTE_ANIMATE","your animated GIF viewer");
  }
  
  return ret;
}


// Array operations

// Create an empty array.
array *:emptyArray()
{
  return new array(0);
}

// Read an element from an array. Checks for initialization & bounds.
item :arrayRead(array *a, int n)
{
  item& i=arrayRead(a,n);
  if (i.empty()) {
    ostringstream buf;
    buf << "read uninitialized value from array at index " << n;
    error(buf.str().c_str());
  }
  return i;
}

// Read an element from an array of arrays. Check bounds and initialize
// as necessary.
item :arrayArrayRead(array *a, int n)
{
  item& i=arrayRead(a,n);
  if (i.empty()) i=new array(0);
  return i;
}

// Write an element to an array.  Increase size if necessary.
item :arrayWrite(item value, array *a, int n)
{
  checkArray(a);
  size_t len=a->size();
  bool cyclic=a->cyclic();
  if(cyclic && len > 0) n=imod(n,len);
  else {
    if(cyclic) outOfBounds("writing cyclic",len,n);
    if(n < 0) outOfBounds("writing",len,n);
    if(a->size() <= (size_t) n)
      a->resize(n+1);
  }
  (*a)[n] = value;
  return value;
}

// Returns the length of an array.
int :arrayLength(array *a)
{
  checkArray(a);
  return a->size();
}

// Return the cyclic flag for an array.
bool :arrayCyclicFlag(array *a)
{
  checkArray(a);
  return a->cyclic();
}

// The helper function for the cyclic method that sets the cyclic flag.
void :arrayCyclicHelper(bool b, array *a)
{
  checkArray(a);
  a->cyclic(b);
}

// Set the cyclic flag for an array.
callable *:arrayCyclic(array *a)
{
  checkArray(a);
  return new thunk(new bfunc(arrayCyclicHelper),a);
}

// The helper function for the push method that does the actual operation.
item :arrayPushHelper(item i, array *a)
{
  checkArray(a);
  a->push(i);
  return i;
}

// Returns the push method for an array.
callable *:arrayPush(array *a)
{
  checkArray(a);
  return new thunk(new bfunc(arrayPushHelper),a);
}

// The helper function for the append method that appends b to a.
void :arrayAppendHelper(array *b, array *a)
{
  checkArray(a);
  checkArray(b);
  size_t size=b->size();
  for(size_t i=0; i < size; i++)
    a->push((*b)[i]);
}

// Returns the append method for an array.
callable *:arrayAppend(array *a)
{
  checkArray(a);
  return new thunk(new bfunc(arrayAppendHelper),a);
}

// The helper function for the pop method.
item :arrayPopHelper(array *a)
{
  checkArray(a);
  if(a->size() == 0) 
    error("cannot pop element from empty array");
  return a->pop();
}

// Returns the pop method for an array.
callable *:arrayPop(array *a)
{
  checkArray(a);
  return new thunk(new bfunc(arrayPopHelper),a);
}

bool :arrayAlias(array *a, array *b)
{
  return a==b;
}

// Return array formed by indexing array a with elements of integer array b
array *:arrayIntArray(array *a, array *b)
{
  checkArray(a);
  checkArray(b);
  size_t asize=a->size();
  size_t bsize=b->size();
  array *r=new array(bsize);
  for(size_t i=0; i < bsize; i++) {
    int index=read<int>(b,i);
    if(index < 0) index += (int) asize;
    if(index < 0 || index >= (int) asize)
      error("reading out-of-bounds index from array");
    (*r)[i]=(*a)[index];
  }
  return r;
}

// Generate the sequence {f_i : i=0,1,...n-1} given a function f and integer n
intarray *:arraySequence(callable *f, int n)
{
  if(n < 0) n=0;
  array *a=new array(n);
  for(int i=0; i < n; ++i) {
    Stack->push(i);
    f->call(Stack);
    (*a)[i]=pop(Stack);
  }
  return a;
}

// Return the array {0,1,...n-1}
intarray *sequence(int n)
{
  if(n < 0) n=0;
  array *a=new array(n);
  for(int i=0; i < n; ++i) {
    (*a)[i]=i;
  }
  return a;
}

// Apply a function to each element of an array
array *:arrayFunction(callable *f, array *a)
{
  checkArray(a);
  size_t size=a->size();
  array *b=new array(size);
  for(size_t i=0; i < size; ++i) {
    Stack->push((*a)[i]);
    f->call(Stack);
    (*b)[i]=pop(Stack);
  }
  return b;
}

bool all(boolarray *a)
{
  checkArray(a);
  unsigned int size=(unsigned int) a->size();
  bool c=true;
  for(unsigned i=0; i < size; i++)
    if(!get<bool>((*a)[i])) {c=false; break;}
  return c;
}

boolarray* !(boolarray* a)
{
  checkArray(a);
  size_t size=a->size();
  array *c=new array(size);
  for(size_t i=0; i < size; i++)
    (*c)[i]=!read<bool>(a,i);
  return c;
}

int :arrayBoolSum(boolarray *a)
{
  checkArray(a);
  size_t size=a->size();
  int sum=0;
  for(size_t i=0; i < size; i++)
    sum += read<bool>(a,i) ? 1 : 0;
  return sum;
}

array *:arrayCopy(array *a)
{
  return copyArray(a);
}

array *:arrayConcat(array *a, array *b)
{
  checkArray(a);
  checkArray(b);
  size_t asize=a->size();
  size_t bsize=b->size();
  array *c=new array(asize+bsize);
  for(size_t i=0; i < asize; i++) 
    (*c)[i]=(*a)[i];
  for(size_t i=0; i < bsize; i++, asize++) 
    (*c)[asize]=(*b)[i];
  return c;
}

array *:array2Copy(array *a)
{
  return copyArray2(a);
}

array *:array2Transpose(array *a)
{
  checkArray(a);
  size_t asize=a->size();
  array *c=new array(0);
  for(size_t i=0; i < asize; i++) {
    size_t ip=i+1;
    array *ai=read<array*>(a,i);
    checkArray(ai);
    size_t aisize=ai->size();
    size_t csize=c->size();
    if(csize < aisize) {
      c->resize(aisize);
      for(size_t j=csize; j < aisize; j++) {
	(*c)[j]=new array(ip);
      }
    }
    for(size_t j=0; j < aisize; j++) {
    array *cj=read<array*>(c,j);
    if(cj->size() < ip) cj->resize(ip);
    (*cj)[i]=(*ai)[j];
    }
  }
  return c;
}

// In a boolean array, find the index of the nth true value or -1 if not found
// If n is negative, search backwards.
int :arrayFind(array *a, int n)
{
  checkArray(a);
  int size=(int) a->size();
  int j=-1;
  if(n > 0)
    for(int i=0; i < size; i++)
      if(read<bool>(a,i)) {
	n--; if(n == 0) {j=i; break;}
      }
  if(n < 0)
    for(int i=size-1; i >= 0; i--)
      if(read<bool>(a,i)) {
	n++; if(n == 0) {j=i; break;}
      }
  return j;
}

// construct vector obtained by replacing those elements of b for which the
// corresponding elements of a are false by the corresponding element of c.
array *:arrayConditional(array *a, array *b, array *c)
{
  size_t size=a->size();
  array *r=new array(size);
  if(b && c) {
    checkArrays(a,b);
    checkArrays(b,c);
    for(size_t i=0; i < size; i++)
      (*r)[i]=read<bool>(a,i) ? (*b)[i] : (*c)[i];
  } else {
    r->clear();
    if(b) {
      checkArrays(a,b);
      for(size_t i=0; i < size; i++)
        if(read<bool>(a,i)) r->push((*b)[i]);
    } else if(c) {
      checkArrays(a,c);
      for(size_t i=0; i < size; i++)
        if(!read<bool>(a,i)) r->push((*c)[i]);
    }
  }
  return r;
}

// Solve the problem L\inv f, where f is an n vector and L is the n x n matrix
//
// [ b[0] c[0]           a[0]   ]
// [ a[1] b[1] c[1]             ]
// [      a[2] b[2] c[2]        ]
// [                ...         ]
// [       c[n-1] a[n-1] b[n-1] ]
realarray *tridiagonal(realarray *a, realarray *b, realarray *c, realarray *f)
{
  checkArray(f);
  checkArray(c);
  checkArray(b);
  checkArray(a);
  
  size_t n=a->size();
  if(n != b->size() || n != c->size() || n != f->size())
    vm::error(arraymismatch);
  
  array *up=new array(n);
  array& u=*up;

  if(n == 0) return up;
  
  // Special case: Zero Dirichlet boundary conditions
  if(read<double>(a,0) == 0.0 && read<double>(c,n-1) == 0.0) {
    static double *work;
    static size_t size=0;
  
    CheckReallocate(work,n,size);
    
    double temp=1.0/read<double>(b,0);
    u[0]=read<double>(f,0)*temp;
    work[0]=-read<double>(c,0)*temp;
	
    for(size_t i=1; i < n; i++) {
      double temp=1.0/(read<double>(b,i)+read<double>(a,i)*work[i-1]);
      u[i]=(read<double>(f,i)-read<double>(a,i)*read<double>(u,i-1))*temp;
      work[i]=-read<double>(c,i)*temp;
    }

    for(size_t i=n-1; i >= 1; i--)
      u[i-1]=read<double>(u,i-1)+work[i-1]*read<double>(u,i);
    return up;
  }
  
  double binv=read<double>(b,0);
  if(binv == 0.0) dividebyzero();
  binv=1.0/binv;
  
  if(n == 1) {u[0]=read<double>(f,0)*binv; return up;}
  if(n == 2) {
    double factor=(read<double>(b,0)*read<double>(b,1)-
		   read<double>(a,0)*read<double>(c,1));
    if(factor== 0.0) dividebyzero();
    factor=1.0/factor;
    double temp=(read<double>(b,0)*read<double>(f,1)-
	  read<double>(c,1)*read<double>(f,0))*factor;
    u[0]=(read<double>(b,1)*read<double>(f,0)-
	  read<double>(a,0)*read<double>(f,1))*factor;
    u[1]=temp;
    return up;
  }
	
  static double *gamma,*delta;
  static size_t size=0;
  CheckReallocate(gamma,delta,n-2,size);
  
  gamma[0]=read<double>(c,0)*binv;
  delta[0]=read<double>(a,0)*binv;
  u[0]=read<double>(f,0)*binv;
  double beta=read<double>(c,n-1);
  double fn=read<double>(f,n-1)-beta*read<double>(u,0);
  double alpha=read<double>(b,n-1)-beta*delta[0];

  for(size_t i=1; i <= n-3; i++) {
    double alphainv=read<double>(b,i)-read<double>(a,i)*gamma[i-1];
    if(alphainv == 0.0) dividebyzero();
    alphainv=1.0/alphainv;
    beta *= -gamma[i-1];
    gamma[i]=read<double>(c,i)*alphainv;
    u[i]=(read<double>(f,i)-read<double>(a,i)*read<double>(u,i-1))*alphainv;
    fn -= beta*read<double>(u,i);
    delta[i]=-read<double>(a,i)*delta[i-1]*alphainv;
    alpha -= beta*delta[i];
  }
	
  double alphainv=read<double>(b,n-2)-read<double>(a,n-2)*gamma[n-3];
  if(alphainv == 0.0) dividebyzero();
  alphainv=1.0/alphainv;
  u[n-2]=(read<double>(f,n-2)-read<double>(a,n-2)*read<double>(u,n-3))
    *alphainv;
  beta=read<double>(a,n-1)-beta*gamma[n-3];
  double dnm1=(read<double>(c,n-2)-read<double>(a,n-2)*delta[n-3])*alphainv;
  double temp=alpha-beta*dnm1;
  if(temp == 0.0) dividebyzero();
  u[n-1]=temp=(fn-beta*read<double>(u,n-2))/temp;
  u[n-2]=read<double>(u,n-2)-dnm1*temp;
	
  for(size_t i=n-2; i >= 1; i--)
    u[i-1]=read<double>(u,i-1)-gamma[i-1]*read<double>(u,i)-delta[i-1]*temp;
  
  return up;
}

// Compute the fast Fourier transform of a pair array
pairarray *:pairArrayFFT(pairarray *a, int sign)
{
  checkArray(a);
  unsigned n=(unsigned) a->size();
  array *c=new array(n);
#ifdef HAVE_LIBFFTW3
  Complex *f=FFTWComplex(n);
  fft1d Forward(n,sign,f);
  
  for(size_t i=0; i < n; i++) {
    pair z=read<pair>(a,i);
    f[i]=Complex(z.getx(),z.gety());
  }
  Forward.fft(f);
  
  for(size_t i=0; i < n; i++) {
    Complex z=f[i];
    (*c)[i]=pair(z.real(),z.imag());
  }
  FFTWdelete(f);
#endif //  HAVE_LIBFFTW3
  return c;
}


