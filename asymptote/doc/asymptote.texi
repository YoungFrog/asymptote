\input texinfo   @c -*-texinfo-*-
@setfilename asymptote.info
@settitle Asymptote
@include version.texi

@copying
This file documents @code{Asymptote}, version @value{VERSION}.

@url{http://asymptote.sourceforge.net}
     
Copyright @copyright{} 2004-5 Andy Hammerlindl, John Bowman, and Tom Prince.
     
@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @acronym{GNU} General Public License (see the
file LICENSE in the top-level source directory).

@end quotation
@end copying
     
@dircategory Languages
@direntry
* asymptote: (asymptote).               Vector graphics language.
@end direntry

@titlepage
@title Asymptote
@subtitle For version @value{VERSION}
@image{logo}
     
@page
@vskip 0pt plus 1filll
@insertcopying
     
@end titlepage
     
@c So the toc is printed at the start.
@contents
     
@ifnottex
@node Top
@top Asymptote
     
@insertcopying
@end ifnottex

@menu
* Description::                 What is @code{Asymptote}?
* Installation::                Downloading and installing
* Examples::                    Getting started
* Programming::                 The @code{Asymptote} vector graphics language
* Drawing commands::            Four primitive graphics commands
* LaTeX usage::                 Embedding @code{Asymptote} commands within @code{LaTeX}
* Options::                     Command line options
* Interactive mode::            Typing @code{Asymptote} commands interactively
* GUI::                         Graphical user interface
* PostScript to Asymptote::     @code{Asymptote} backend to @code{pstoedit}
* Help::                        Where to get help and submit bug reports
* Credits::                     Contributions and acknowledgments
* Index::                       General index

@detailmenu
 --- The Detailed Node Listing ---

Installation

* UNIX binary distributions::   Prebuilt @code{UNIX} binaries
* Microsoft Windows::           Prebuilt @code{Microsoft Windows} binary
* Environment variables::       Configuring @code{Asymptote} for your system
* Search paths::                Where @code{Asymptote} looks for your files
* Compiling from UNIX source::  Building @code{Asymptote} from scratch
* Editing modes::               Convenient @code{emacs} and @code{vim} modes
* CVS::                         Latest development version
* Uninstall::                   Goodbye, @code{Asymptote}!

Programming

* Data types::                  void, bool, int, real, pair, triple, string
* Guides and paths::            Specifying lines and curves
* Pens::                        Colors, line types, line widths, font sizes
* Transforms::                  Affine transforms
* Frames and pictures::         Canvases for immediate and deferred drawing
* Files::                       Reading and writing your data
* Structures::                  Organize your data
* Operators::                   Arithmetic and logical operators
* Implicit scaling::            Avoiding those ugly *s
* Functions::                   Traditional and high-order functions
* Arrays::                      Dynamic vectors
* Casts::                       Implicit and explicit casts
* Import::                      Importing external @code{Asymptote} packages
* Static::                      Where to allocate your variable?

Operators

* Arithmetic & logical::        Basic mathematical operators
* Self & prefix operators::     Increment and decrement
* User-defined operators::      Overloading operators

Functions

* Default arguments::           Default values can appear anywhere
* Named arguments::             Assigning function arguments by keyword
* Rest arguments::              Functions with a variable number of arguments
* Mathematical functions::      Standard libm functions


Import

* plain::                       Default @code{Asymptote} base file
* simplex::                     Linear programming: simplex method
* graph::                       2D linear & logarithmic graphs
* three::                       Three-dimensional vector graphics
* graph3::                      3D linear & logarithmic graphs
* featpost3D::                  Preliminary port of @code{featpost3d}
* math::                        Extend @code{Asymptote}'s math capabilities
* geometry::                    Geometry routines
* stats::                       Statistics routines and histograms
* patterns::                    Custom fill and draw patterns
* palette::                     Color density images and palettes
* tree::                        Dynamic binary search tree
* drawtree::                    Tree drawing module
* feynman::                     Feynman diagrams
* MetaPost::                    @code{MetaPost} compatibility routines
* unicode::                     Accept @code{unicode} (UTF-8) characters
* latin1::                      Accept @code{ISO 8859-1} characters
* babel::                       Implement @code{LaTeX} @code{babel} package

Drawing commands

* draw::                        Draw a path on a picture or frame
* fill::                        Fill a cyclic path on a picture or frame
* clip::                        Clip a picture or frame to a cyclic path
* label::                       Label a point on a picture

@end detailmenu
@end menu

@node Description
@chapter Description
@cindex description

@code{Asymptote} is a powerful descriptive vector graphics language that
provides a mathematical coordinate-based framework for technical drawings.
Labels and equations are typeset with @code{LaTeX}, for overall document
consistency, yielding the same high-quality level of typesetting that
@code{LaTeX} provides for scientific text. By default it produces
@code{PostScript} output, but it can also generate any format that the
@code{ImageMagick} package can produce.
     
A major advantage of @code{Asymptote} over other graphics packages is
that it is a high-level programming language, as opposed to just a graphics
program: it can therefore exploit the best features of the script
(command-driven) and graphical-user-interface (@acronym{GUI}) methods for
producing figures. The rudimentary @acronym{GUI} @code{xasy} included with the
package allows one to move script-generated objects
around. To make @code{Asymptote} accessible to the average user, this
@acronym{GUI} is currently being developed into a full-fledged interface
that can generate objects directly. However, the script portion of the language
is now ready for general use by users who are willing to learn a few
simple @code{Asymptote} graphics commands (@pxref{Drawing commands}).

@code{Asymptote} is mathematically oriented (e.g. one can
use complex multiplication to rotate a vector) and uses
@code{LaTeX} to do the 
typesetting of labels. This is an important feature for scientific
applications. It was inspired by an earlier drawing program (with a weaker
syntax & capabilities) called @code{MetaPost}.

Many of the features of @code{Asymptote} are written in the
@code{Asymptote} language itself. While the stock version of
@code{Asymptote} is designed for mathematics typesetting needs, one can
write @code{Asymptote} modules that tailor it to specific
applications. A scientific graphing module has already been written
(@pxref{graph}). Examples of @code{Asymptote} code and output,
including animations, are available at
@quotation
@url{http://asymptote.sourceforge.net/gallery/}.
@end quotation

The @code{Asymptote} vector graphics language provides:

@itemize @bullet
@item a natural coordinate-based framework for technical drawings,
inspired by @code{MetaPost}, with a much cleaner, powerful C++-like programming
syntax;

@item @code{LaTeX} typesetting of labels, for overall document consistency;

@item compilation of figures into virtual machine code for speed, without
sacrificing portability;

@item the power of a script-based language coupled to the convenience of
a @acronym{GUI};

@item customization using its own C++-like graphics programming language; 

@item sensible defaults for graphical features, with the ability to override;

@item a high-level mathematically oriented interface to the
@code{PostScript} language for vector graphics, including affine transforms
and complex variables;

@item functions that can create new (anonymous) functions;

@item deferred drawing that uses the simplex method to solve overall size
constraint issues between fixed-sized objects (labels and arrowheads) and
objects that should scale with figure size;

@item a standard for typesetting mathematical figures, just
as @TeX{}/@code{LaTeX} is the de-facto standard for typesetting equations.

@end itemize

@node Installation
@chapter Installation
@cindex installation

@menu
* UNIX binary distributions::   Prebuilt @code{UNIX} binaries
* Microsoft Windows::           Prebuilt @code{Microsoft Windows} binary
* Environment variables::       Configuring @code{Asymptote} for your system
* Search paths::                Where @code{Asymptote} looks for your files
* Compiling from UNIX source::  Building @code{Asymptote} from scratch
* Editing modes::               Convenient @code{emacs} and @code{vim} modes
* CVS::                         Latest development version
* Uninstall::                   Goodbye, @code{Asymptote}!
@end menu

After following the instructions for your specific distribution,
please see also @ref{Environment variables}.

@noindent
We recommend subscribing to new release announcements at
@quotation
@url{http://freshmeat.net/subscribe/50750}
@end quotation
@noindent
Users may also wish to monitor the @code{Asymptote} forum:
@quotation
@url{http://sourceforge.net/forum/monitor.php?forum_id=409349}
@end quotation
@noindent
and provide guidance to others by rating the @code{Asymptote} project:
@quotation
@url{http://freshmeat.net/projects/asy}
@end quotation

@node UNIX binary distributions
@section UNIX binary distributions
@cindex UNIX binary distributions

Here are the commands that the root user can use to install the
@code{Linux i386} binary distribution of version @code{x.xx} of
@code{Asymptote} for a specific platform @code{ARCH} in
@code{/usr/local}. The executable file will be
@code{/usr/local/bin/asy} (the optional @code{texhash} command
installs a LaTeX style file):
@verbatim
tar -C / -zxf asymptote-x.xx.ARCH.tar.gz
texhash
@end verbatim

@noindent
Example code will be installed by default in
@code{/usr/local/share/doc/asymptote}. 

@cindex Debian
@noindent
Alternatively, Debian users can install Hubert Chan's @code{Asymptote} package:
@quotation
@url{http://www.uhoreg.ca/programming/debian/}
@end quotation

@node Microsoft Windows
@section Microsoft Windows
@cindex Microsoft Windows
Users of the @code{Microsoft Windows} operating system can install the
self-extracting @code{Asymptote} executable @code{asymptote-install-x.xx.exe}.
A working @code{TeX} implementation (such as the one available at
@url{http://www.miktex.org}) will be required to typeset labels.
The @code{Python} interpretor from @url{http://www.python.org} is only required
if you wish to try out the graphical user interface (@pxref{GUI}).

@noindent
Example code will be installed by default in
@code{c:\Program Files\Asymptote\examples}.

@node Environment variables
@section Environment variables
@cindex environment variables

@cindex @code{-V}
@cindex @code{ASYMPTOTE_PSVIEWER}
@cindex @code{ASYMPTOTE_PDFVIEWER}
@cindex @code{ASYMPTOTE_GS}
In interactive mode, or when given the @code{-V} option (the default
under @code{MSDOS}), @code{Asymptote} will automatically invoke the
@code{PostScript} viewer @code{gv} (under
@code{UNIX}) or @code{gsview} (under @code{MSDOS}; available from
@url{http://www.cs.wisc.edu/~ghost/gsview/}) to display
graphical output. These defaults may be overridden with the optional
environment variable @code{ASYMPTOTE_PSVIEWER}. For @acronym{PDF}
format output, the @code{ASYMPTOTE_GS} environment variable specifies the  
location of the @code{PostScript}-to-@acronym{PDF} processor @code{gs} and
@code{ASYMPTOTE_PDFVIEWER} specifies the location of the @acronym{PDF} viewer.
The graphical user interface may also required setting the variable
@code{ASYMPTOTE_PYTHON} if @code{python} is installed in a nonstandard
location. Here are the default values of these environment variables:
@verbatim
UNIX:
export ASYMPTOTE_PSVIEWER=gv
export ASYMPTOTE_PDFVIEWER=acroread
export ASYMPTOTE_GS=gs
export ASYMPTOTE_PYTHON=

MSDOS:
set ASYMPTOTE_PSVIEWER=c:\Program Files\Ghostgum\gsview\gsview32.exe
set ASYMPTOTE_PDFVIEWER=
              c:\Program Files\Adobe\Acrobat 7.0\Reader\AcroRd32.exe
set ASYMPTOTE_GS=c:\Program Files\gs\gs8.51\bin\gswin32.exe
set ASYMPTOTE_PYTHON=c:\Python24\python.exe
@end verbatim

To set environment variables under @code{Microsoft Windows XP}:
@enumerate
@item Click on the @code{Start} button.
@item Right-click on @code{My Computer}. 
@item Choose @code{Properties} from the popup menu.
@item Click the @code{Advanced} tab. 
@item Click the @code{Environment Variables} button.
@end enumerate

The following environment variables normally do not require adjustment:
@verbatim
ASYMPTOTE_LATEX
ASYMPTOTE_DVIPS
ASYMPTOTE_CONVERT
ASYMPTOTE_DISPLAY
ASYMPTOTE_ANIMATE
ASYMPTOTE_XASY
@end verbatim

To properly support interactive mode, the @code{PostScript} viewer
should be capable of automatically redrawing whenever the output file is
updated. The default @code{PostScript} viewer @code{gv} supports this
(via a @code{SIGHUP} signal). Users of @code{ggv} will need to
enable @code{Watch file} under @code{Edit/Postscript Viewer
Preferences} and @code{gsview} users will need to enable
@code{Options/Auto Redisplay} (however, under @code{MSDOS} it is still
necessary to click on the @code{gsview} window; under @code{UNIX}
one must manually redisplay by pressing the @code{r} key).  

The patches supplied in the @code{patches} directory fix known bugs
in the @code{UNIX} @code{PostScript} viewer @code{gv-3.5.8} and
@code{gv-3.6.1} (most notably the backwards-incompatible command line
options of @code{gv-3.6.1}). Another bug in  @code{gv-3.6.1} requires
it to be explicitly configured with  @code{./configure
--enable-signal-handle} for it to work properly with
@code{Asymptote}'s interactive mode.

@node Search paths
@section Search paths
@cindex search paths
o
In looking for @code{Asymptote} system
files, @code{asy} will search the following paths, in the order listed:
@enumerate
@item
current directory
@item
@cindex @code{ASYMPTOTE_DIR}
@code{$ASYMPTOTE_DIR}

A list of one or more directories (separated by @code{:} under UNIX and
@code{;} under @code{MSDOS}).
@item
system-wide directory (default: @code{@value{Datadir}/asymptote} under
@code{UNIX} and @code{c:\Program Files\Asymptote} under @code{MSDOS}).
@end enumerate

@node Compiling from UNIX source
@section Compiling from UNIX source
@cindex Compiling from UNIX source

To compile and install a @code{UNIX} executable from
a source release
@code{x.xx}, first execute the commands:
@verbatim
tar -zxf asymptote-x.xx.tar.gz
cd asymptote-x.xx
@end verbatim

@noindent Then put
@url{http://www.hpl.hp.com/personal/Hans_Boehm/gc/gc_source/gc6.6.tar.gz}
in the current directory and
@verbatim
./configure
make all
make install
@end verbatim
@noindent
If you get errors from a broken @code{pdftex} installation, simply put
@quotation
@url{http://asymptote.sourceforge.net/asymptote.pdf}
@end quotation
@noindent
in the directory @code{doc} and repeat the command @code{make all}.

@noindent
For a (default) system-wide installation, the last command should be
done as root. The above steps will compile an optimized single-threaded static
version of the Boehm garbage collector
(@url{http://www.hpl.hp.com/personal/Hans_Boehm/gc/}).
Alternatively, one can request use of a (presumably multithreaded and therefore
slower) system version of the Boehm garbage collector by configuring
instead with @code{./configure --enable-gc=system}. One can disable
use of the garbage collector by configuring with @code{./configure
--disable-gc}. For a list of other configuration options, say
@code{./configure --help}.

If you are compiling @code{Asymptote} with @code{gcc}, you will need a
relatively recent version (e.g. 3.2 or later).  If you get errors
compiling @code{interact.cc}, try installing an up-to-date version of
the @acronym{GNU} @code{readline} library or else uncomment
@code{HAVE_LIBREADLINE} in @code{config.h}.

The @code{FFTW} library is only required if you want @code{Asymptote}
to be able to take Fourier transforms of data (say, to compute an
audio power spectrum).

If you don't want to install @code{Asymptote} system wide, just make
sure the compiled binary @code{asy} and @acronym{GUI} script @code{xasy} are in
your path and set the environment variable @code{ASYMPTOTE_DIR} to point
to the directory @code{base} (in the top level directory of the
@code{Asymptote} source code). 

@node Editing modes
@section Editing modes
@cindex Editing modes
@cindex @code{emacs}
@cindex @code{asy-mode}
Users of @code{emacs} can edit @code{Asymptote} code with the mode
@code{asy-mode}, after enabling it by putting these two lines in the
@code{~/.emacs} initialization file, replacing @code{ASYDIR} with the
location of the @code{Asymptote} example files (by default,
@code{@value{Datadir}/doc/asymptote} or 
@code{c:\Program Files\Asymptote\examples}):
@verbatim
(autoload 'asy-mode "ASYDIR/asy-mode.el" "Asymptote major mode." t)
(setq auto-mode-alist (cons (cons "\\.asy$" 'asy-mode) auto-mode-alist))

@end verbatim

@cindex @code{vim}
@cindex @code{asy.vim}
Fans of @code{vim} can customize @code{vim} for @code{Asymptote} with

@noindent
@code{cp @value{Datadir}/doc/asymptote/asy.vim ~/.vim/syntax/asy.vim}

@noindent
and add the following to their @code{~/.vimrc} file:
@verbatim
augroup filetypedetect
au BufNewFile,BufRead *.asy     setf asy
augroup END
filetype plugin on
@end verbatim

If any of these directories or files don't exist, just create them.
To set @code{vim} up to run the current asymptote script using @code{:make}
just add to @code{~/.vim/ftplugin/asy.vim}:
@verbatim
setlocal makeprg=asy\ %
setlocal errorformat=%f:\ %l.%c:\ %m

@end verbatim

@node CVS
@section CVS
@cindex CVS

The following commands are needed to install the latest development version of
@code{Asymptote} from cvs (when prompted for the @acronym{CVS}
password, type enter):
@verbatim
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/asymptote login
 
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/asymptote co asymptote
cd asymptote-x.xx
./autogen.sh
wget http://www.hpl.hp.com/personal/Hans_Boehm/gc/gc_source/gc6.6.tar.gz
./configure
make all
make install
@end verbatim

To compile without optimization, use the command @code{make CFLAGS=-g}.

@node Uninstall
@section Uninstall
@cindex Uninstall

@noindent
To uninstall a @code{UNIX} binary distribution, type
@verbatim
tar -zxvf asymptote-x.xx.ARCH.tar.gz | xargs rm
texhash
@end verbatim

To uninstall all @code{Asymptote} files installed from a source
distribution, use the command
@verbatim
make uninstall
@end verbatim

@node Examples
@chapter Examples
@cindex examples
To draw a line from coordinate (0,0) to coordinate (100,100) using
@code{Asymptote}'s interactive mode, type at the command prompt:
@verbatim
asy
draw((0,0)--(100,100));
@end verbatim
@image{diagonal}

@cindex @code{bp}
The units here are @code{PostScript} "big points" 
(1 @code{bp} = 1/72 @code{inch}); @code{--} means join with a linear segment.

At this point you can type in further draw commands, which will be added
to the displayed figure, or type @code{quit} to exit interactive mode.
You can use the arrow keys in interactive mode to edit previous lines
(assuming that you have support for the @acronym{GNU} readline library
enabled). Further commands specific to interactive mode are described
in @ref{Interactive mode}.

@cindex batch mode
In batch mode, @code{Asymptote} reads commands directly from a
file. To try this out, type 
@verbatiminclude diagonal.asy

@noindent
into a file, say test.asy. Then execute this file by typing the command
@verbatim
asy -V test
@end verbatim
@noindent
@code{MSDOS} users can drag and drop the file onto the
Desktop @code{asy} icon or make @code{Asymptote} the
default application for files with the extension @code{asy}.

@noindent
@cindex @code{-V}
The @code{-V} option opens up a @code{PostScript}
viewer window so you can immediately view the encapsulated
@code{PostScript} output. By default the output will be written to the
file @code{test.eps}; the prefix of the output file may be changed with
the @code{-o} command line option.

@cindex @code{cycle}
One can draw a line with more than two points and create a cyclic path
like this square:
@verbatiminclude square.asy
@image{square}

It is often inconvenient to work directly with @code{PostScript} coordinates.
The next example draws a unit square scaled to width 101 bp and height
101 bp. The output is identical to that of the previous example.
@verbatim
size(101,101);
draw((0,0)--(1,0)--(1,1)--(0,1)--cycle);
@end verbatim

For convenience, the path @code{(0,0)--(1,0)--(1,1)--(0,1)--cycle}
may be replaced with the predefined variable
@code{unitsquare}, or equivalently, @code{box((0,0),(1,1))}.

@cindex @code{inches}
@cindex @code{cm}
@cindex @code{mm}
@cindex @code{pt}
One can also specify the size in @code{pt} (1 @code{pt} = 1/72.27 @code{inch}),
@code{cm}, @code{mm}, or @code{inches}. 
If 0 is given as a size argument, no restriction is made in that direction;
the overall scaling will be determined by the other direction
(@pxref{size}):
@verbatiminclude bigsquare.asy
@image{bigsquare}

Adding labels is easy in @code{Asymptote}; one specifies the
label as a double-quoted @code{LaTeX} string, a
coordinate, and an optional alignment direction:
@verbatiminclude labelsquare.asy
@image{labelsquare}

See section @ref{graph} (or the online @code{Asymptote} gallery at
@url{http://asymptote.sourceforge.net}) for further examples, including
two-dimensional scientific graphs.

@node Programming
@chapter Programming
@cindex programming

Here is a short introductory example to the @code{Asymptote} programming
language that highlights the similarity of its control structures 
with those of C and C++.
@cindex declaration
@cindex assignment
@cindex conditional
@cindex loop
@cindex @code{if}
@cindex @code{else}
@cindex @code{for}
@verbatim
// This is a comment.

// Declaration: Declare x to be a real variable;
real x;

// Assignment: Assign the real variable x the value 1.
x=1.0;

// Conditional: Test if x equals 1 or not.
if(x == 1.0) {
  write("x equals 1.0");
} else {
  write("x is not equal to 1.0");
}

// Loop: iterate 10 times
for(int i=0; i < 10; ++i) {
  write(i);
}
@end verbatim

@cindex @code{gifmerge}
@cindex @code{merge}
@cindex @code{convert}
@cindex animation
@cindex @code{ImageMagick}
Loops, together with user-defined functions, are illustrated
in the files @code{wheel.asy} and @code{cube.asy} in the
animations subdirectory of the examples directory. These examples use the
@code{gifmerge} command to @code{merge} multiple images into a
gif animation, using the @code{ImageMagick} @code{convert} program.

@cindex @code{while}
@cindex @code{do}
@cindex @code{break}
@cindex @code{continue}
@code{Asymptote} also supports @code{while}, @code{do}, @code{break}, and
@code{continue} statements just as in C/C++. In addition, it supports
many features beyond the ones found in those languages.

@menu
* Data types::                  void, bool, int, real, pair, triple, string
* Guides and paths::            Specifying lines and curves
* Pens::                        Colors, line types, line widths, font sizes
* Transforms::                  Affine transforms
* Frames and pictures::         Canvases for immediate and deferred drawing
* Files::                       Reading and writing your data
* Structures::                  Organize your data
* Operators::                   Arithmetic and logical operators
* Implicit scaling::            Avoiding those ugly *s
* Functions::                   Traditional and high-order functions
* Arrays::                      Dynamic vectors
* Casts::                       Implicit and explicit casts
* Import::                      Importing external @code{Asymptote} packages
* Static::                      Where to allocate your variable?
@end menu

@node Data types
@section Data types
@cindex data types
@code{Asymptote} supports the following data types (in addition to
user-defined types):

@table @code

@item void
@cindex @code{void}
The void type is used only by functions that take or return no arguments.

@item bool
@cindex @code{bool}
a boolean type that can only take on the values @code{true} and
@code{false}. For example:
@verbatim
bool b=true;
@end verbatim

@noindent
defines a boolean variable @code{b} and initializes it to the value
@code{true}. If no initializer is given:
@verbatim
bool b;
@end verbatim

@noindent
the value @code{false} is assumed.

@item int
@cindex @code{int}
an integer type; if no initializer is given, the implicit value @code{0}
is assumed.

@item real
@cindex @code{real}
a real number; this should be set to the highest-precision native
floating-point type on the architecture. The implicit initializer for
type real is @code{0.0}.

@item pair
@cindex @code{pair}
complex number, that is, an ordered pair of real components @code{(x,y)}.
The real and imaginary parts of a pair @code{z} can read as @code{z.x}
and @code{z.y}. We say that @code{x} and @code{y} are virtual members of
the data element pair; they cannot be directly modified, however.
The implicit initializer for type pair is @code{(0.0,0.0)}.

There are a number of ways to take the complex conjugate of a pair:
@example
pair z=(3,4);
z=(z.x,-z.y);
z=z.x-I*z.y;
z=conj(z);
@end example

A number of built-in functions are defined for pairs:

@table @code
@item pair conj(pair z)
@cindex @code{conj}
returns the conjugate of @code{z};

@item real length(pair z)
@cindex @code{length}
@cindex @code{abs}
returns the complex modulus @code{|z|} of its argument @code{z}. 
For example,
@example
pair z=(3,4);
write(length(z));
@end example
produces the result 5. A synonym for @code{length(pair)} is @code{abs(pair)};

@item real angle(pair z)
@cindex @code{angle}
returns the angle of @code{z} in radians in the interval 
[-@code{pi},@code{pi}];

@item real degrees(pair z)
@cindex @code{degrees}
returns the angle of @code{z} in degrees in the interval [0,360);

@item pair unit(pair z)
@cindex @code{unit}
returns a unit vector in the direction of the pair @code{z};

@item pair expi(real angle)
@cindex @code{expi}
returns a unit vector in the direction @code{angle} measured in radians;

@item pair dir(real angle)
@cindex @code{dir}
returns a unit vector in the direction @code{angle} measured in degrees;

@item real xpart(pair z)
@cindex @code{xpart}
returns @code{z.x};

@item real ypart(pair z)
@cindex @code{ypart}
returns @code{z.y};

@item real dot(pair a,pair b)
@cindex @code{dir}
returns the dot product @code{a.x*b.x+a.y*b.y}.

@end table

@item triple
@cindex @code{triple}
an ordered triple of real components @code{(x,y,z)} used for
three-dimensional drawings. The respective components of a triple
@code{v} can read as @code{v.x}, @code{v.y}, and @code{v.z}. 

Here are the built-in functions for triples:
@table @code
@item real length(triple v)
@cindex @code{length}
returns the length @code{|v|} of the vector @code{v}. 
A synonym for @code{length(triple)} is @code{abs(triple)};


@item real polar(triple v)
@cindex @code{polar}
returns the colatitude of @code{v} measured from the @math{z} axis in radians;

@item real azimuth(triple v)
@cindex @code{azimuth}
returns the longitude of @code{v} measured from the @math{x} axis in radians;

@item real colatitude(triple v)
@cindex @code{colatitude}
returns the colatitude of @code{v} measured from the @math{z} axis in degrees;

@item real latitude(triple v)
@cindex @code{latitude}
returns the latitude of @code{v} measured from the @math{xy} plane in degrees;

@item real longitude(triple v)
@cindex @code{longitude}
returns the longitude of @code{v} measured from the @math{x} axis in degrees;

@item real Longitude(triple v)
@cindex @code{Longitude}
returns the longitude of @code{v} in degrees, or @code{0} if
@code{v.x=v.y=0} rather than producing an error; 

@item triple unit(triple v)
@cindex @code{unit}
returns a unit triple in the direction of the triple @code{v};

@item triple expi(real colatitude, real longitude)
@cindex @code{expi}
returns a unit triple in the direction @code{(colatitude,longitude)}
measured in radians;

@item triple dir(real colatitude, real longitude)
@cindex @code{dir}
returns a unit triple in the direction @code{(colatitude,longitude)}
measured in degrees;

@item real xpart(triple v)
@cindex @code{xpart}
returns @code{v.x};

@item real ypart(triple v)
@cindex @code{ypart}
returns @code{v.y};

@item real zpart(triple v)
@cindex @code{zpart}
returns @code{v.z};

@item real dot(triple a,triple b)
@cindex @code{dot}
returns the dot product @code{a.x*b.x+a.y*b.y+a.z*b.z};

@item triple cross(triple a,triple b)
@cindex @code{cross}
returns the cross product

@code{(a.y*b.z-a.z*b.y,a.z*b.x-a.x*b.z,a.x*b.y-b.x*a.y)}.
@end table

@item string
@cindex @code{string}
@cindex @TeX{} string
a character string, implemented using the STL @code{string} class.

Strings delimited by double quotes (@code{"}) are subject to the
following mapping to allow the use of double quotes in @TeX{} (e.g. for
using the @code{babel} package, @pxref{babel}):

@itemize @bullet 
@item \" maps to "
@end itemize

@cindex @code{C} string
Strings delimited by single quotes (@code{'}) have the same mappings as
character strings in ANSI @code{C}:

@itemize @bullet 
@item \' maps to '
@item \" maps to "
@item \? maps to ?
@item \\ maps to backslash
@item \a maps to alert
@item \b maps to backspace
@item \f maps to form feed
@item \n maps to newline
@item \r maps to carriage return
@item \t maps to tab
@item \v maps to vertical tab
@item \0-\377 map to corresponding octal byte
@item \x0-\xFF map to corresponding hexadecimal byte
@end itemize

The implicit initializer for type string is the empty string @code{""}.
In the following string functions, position 0 denotes the start of the string.

@table @code

@cindex @code{length}
@item int length(string s)
returns the length of the string @code{s};

@cindex @code{find}
@item int find(string s, string t, int pos=0)
returns the position of the first occurrence of string @code{t} in string
@code{s} at or after position @code{pos}, or -1 if @code{t} is not a
substring of @code{s};

@cindex @code{rfind}
@item int rfind(string s, string t, int pos=-1)
returns the position of the last occurrence of string @code{t} in string
@code{s} at or before position @code{pos} (if @code{pos}=-1, at the end
of the string @code{s}), or -1 if @code{t} is not a substring of @code{s};

@cindex @code{insert}
@item string insert(string s, int pos, string t)
return the string formed by inserting string @code{t} at position
@code{pos} in @code{s};

@cindex @code{erase}
@item string erase(string s, int pos, int n)
returns the string formed by erasing the string of length @code{n} 
(if @code{n}=-1, to the end of the string @code{s}) at
position @code{pos} in @code{s};

@cindex @code{substr}
@item string substr(string s, int pos, int n=-1)
returns the substring of @code{s} starting at position @code{pos}
and of length @code{n} (if @code{n}=-1, until the end of the
string @code{s});

@cindex @code{reverse}
@item string reverse(string s)
return the string formed by reversing string @code{s};

@item string replace(string s, string before, string after) 
@cindex @code{replace}
returns a string with all occurrences of the string @code{before} in the
string @code{s} changed to the string @code{after};

@item string replace(string s, string[][] table)
returns a string constructed by translating in string @code{s} all
occurrences of the string @code{before} in an array @code{table} of
string pairs @{@code{before},@code{after}@} to the corresponding
string @code{after};

@anchor{format}
@item string format(string s, int n) 
@cindex @code{format}
returns a string containing @code{n} formatted according to the C-style
format string @code{s};

@item string format(string s, real x)
returns a string containing @code{x} formatted according to the C-style format
string @code{s} (see the documentation for the C-function
@code{fprintf}), except that only one data field is allowed, trailing
zeros are removed by default (unless @code{#} is specified) and @TeX{}
is used to typeset scientific notation;

@item string time(string s)
@cindex @code{time}
returns the current time formatted by the ANSI C routine strftime
according to the string @code{s}. For example,
@verbatim
write(time("%a %b %d %H:%M:%S %Z %Y"));
@end verbatim

@noindent
outputs the time in the default format of the UNIX @code{date} command.

@end table

@cindex @code{typedef}

@end table

As in C/C++, complicated types may be abbreviated with @code{typedef}
(see the example in @ref{Functions}).

@node Guides and paths
@section Guides and paths

@table @code
@item guide
@cindex @code{guide}
an unresolved cubic spline (list of cubic-spline nodes and control points).

This is like a path except the computation of the cubic spline is
deferred until drawing time (when it is resolved into a path); this allows
two guides with free endpoint conditions to be joined together smoothly.

@item path
@cindex @code{path}
a cubic spline resolved into a fixed path.

A path is specified as a list of pairs or paths interconnected with
@cindex @code{cycle}
@cindex @code{--}
@cindex @code{..}
@code{--}, which denotes a straight line segment, or @code{..}, which
denotes a cubic spline.
@cindex @code{unitcircle}
Specifying a final node @code{cycle} creates a cyclic path that
connects smoothly back to the initial node, as in this approximation
(accurate to within 0.06%) of a unit circle:
@verbatim
guide unitcircle=E..N..W..S..cycle;
@end verbatim

This example uses the standard compass directions @code{E=(1,0)},
@code{N=(0,1)}, @code{NE=unit(N+E)}, and @code{ENE=unit(E+NE)}, etc.,
which along with the directions @code{up}, @code{down}, @code{right},
and @code{left} are defined as pairs in the default @code{Asymptote} base file
@code{plain.asy}.
@cindex @code{circle}
@anchor{circle}
The routine @code{circle(pair c, real r)} in @code{plain.asy}
constructs a circle of radius @code{r} centered on @code{c} by
transforming unitcircle:
@verbatim
guide circle(pair c, real r)
{
  return shift(c)*scale(r)*unitcircle;
}
@end verbatim
If high accuracy is needed, a true circle may be produced with this
routine, defined in the module @code{graph.asy}:
@verbatim
guide Circle(pair c, real r, int ngraph=400);
@end verbatim


@anchor{Bezier}
Each interior node of a cubic spline may be given a
direction prefix or suffix @code{@{dir@}}: the direction of the pair
@code{dir} specifies the direction of the incoming or outgoing tangent,
respectively, to the curve at that node. Exterior nodes may be
given direction specifiers only on their interior side. Cubic splines between
a node @code{z}, with postcontrol point @code{Z}, and a node @code{w},
with precontrol point @code{W}, are computed as the Bezier curve

@image{bezier,,,(1-t)^3*z+3t(1-t)^2*Z+3t^2(1-t)*W+t^3*w for 0 <=t <= 1.}

A good reference on Bezier curves and the algorithms that @code{Asymptote}
uses to determine the control points is Donald Knuth's monograph,
@code{The MetaFontbook}, chapters 3 and 14.

This example draws an approximate quarter circle:
@verbatiminclude quartercircle.asy
@image{quartercircle}

A circular arc consistent with the above approximation centered on
@code{c} with radius @code{r} from @code{angle1} to @code{angle2}
degrees, drawing counterclockwise if @code{angle2 >= angle1}, can be
constructed with
@verbatim
guide arc(pair c, real r, real angle1, real angle2);
@end verbatim
If @code{r} < 0, the complementary arc of radius @code{|r|} is constructed.
For convenience, an arc centered at @code{c} from pair @code{z1} to
@code{z2} (assuming @code{|z2-c|=|z1-c|}) in the direction CCW
(counter-clockwise) or CW (clockwise) may also be constructed with
@verbatim
guide arc(pair c, explicit pair z1, explicit pair z2,
          bool direction=CCW)
@end verbatim

If high accuracy is needed, a true arc may be produced with this
routine, defined in the module @code{graph.asy}:
@verbatim
guide Arc(pair c, real r, real angle1, real angle2,
          int ngraph=400);
@end verbatim

@cindex @code{controls}
Instead of specifying the tangent directions before and after a node,
one can also specify the control points directly:
@verbatim
draw((0,0)..controls (0,100) and (100,100)..(100,0));
@end verbatim

@cindex @code{tension}
@cindex @code{and}
@cindex @code{atleast}
One can also change the spline tension from its default value of 1 to any
real value greater than or equal to 0.75:
@verbatim
draw((100,0)..tension 2 ..(100,100)..(0,100));
draw((100,0)..tension 2 and 1 ..(100,100)..(0,100));
draw((100,0)..tension atleast 1 ..(100,100)..(0,100));
@end verbatim

@cindex @code{MetaPost ...@ }
@cindex @code{::}
The @code{MetaPost ...} path connector, which requests, when possible, an
inflection-free curve confined to a triangle defined by the
endpoints and directions, is implemented in @code{Asymptote} as the
convenient abbreviation @code{::} for @code{..tension atleast 1 ..}
(the ellipsis @code{...} is used in @code{Asymptote} to indicate a
variable number of arguments; @pxref{Rest arguments}).  For example,
compare
@verbatiminclude dots.asy
@image{dots}
with
@verbatiminclude colons.asy
@image{colons}

@cindex @code{---}
@cindex @code{&}
The @code{---} connector is an abbreviation for @code{..tension atleast
infinity..} and the @code{&} connector concatenates two paths which meet
at a common point. Here is an example of all five path connectors:
@verbatiminclude join.asy
@image{join}

@cindex @code{curl}
The curl parameter specifies the curvature at the endpoints of a path
(0 means straight; the default value of 1 means approximately circular):
@verbatim
draw((100,0){curl 0}..(100,100)..{curl 0}(0,100));
@end verbatim

The implicit initializer for paths and guides is @code{nullpath},
which is useful for building up a path within a loop.
A direction specifier given to @code{nullpath} modifies the node on
the other side: the paths
@verbatim
a..{up}nullpath..b;
c..nullpath{up}..d;
e..{up}nullpath{down}..f;
@end verbatim
are respectively equivalent to
@verbatim
a..nullpath..{up}b;
c{up}..nullpath..d;
e{down}..nullpath..{up}f;
@end verbatim

@cindex @code{PostScript} subpath
@cindex @code{^^}
@cindex @code{path[]}
@cindex superpath
An @code{Asymptote} path, being connected, is equivalent to a
@code{Postscript subpath}. The @code{^^} binary operator, which
requests that the pen be moved (without drawing or affecting
endpoint curvatures) from the final point of the left-hand path to the
initial point of the right-hand path, may be used to group several
@code{Asymptote} paths into a @code{path[]} array (equivalent to a
@code{PostScript} path):
@verbatiminclude superpath.asy
@image{superpath}

@cindex evenodd
The @code{PostScript} even-odd fill rule here specifies that only the
region bounded between the two unit circles is filled (@pxref{fillrule}).
In this example, the same effect can be achieved by using the default
zero winding number fill rule, if one is careful to alternate the
orientation of the paths:
@verbatim
filldraw(unitcircle^^reverse(g),yellow,black);
@end verbatim

The @code{^^} operator is used by the @code{box3d} function in
@code{three.asy} to construct a two-dimensional projection of the edges of a 3D
cube, without retracing steps:
@verbatiminclude cube.asy
@image{cube}

Here are some useful functions for paths:

@table @code

@cindex @code{length}
@item int length(path);
This is the number of (linear or cubic) segments in the path.
If the path is cyclic, this is the same as the number of nodes in the path.

@cindex @code{size}
@item int size(path);
This is the number of nodes in the path.
If the path is cyclic, this is the same as the path length.

@cindex @code{point}
@item pair point(path p, int n);
If @code{p} is cyclic, return the coordinates of node @code{n} mod
@code{length(p)}. Otherwise, return the coordinates of node @code{n},
unless @code{n} < 0 (in which case @code{point(0)} is returned) or
@code{n} > @code{length(p)} (in which case @code{point(length(p))}
is returned).

@item pair point(path p, real t);
This returns the coordinates of the point between node @code{floor(t)}
and @code{floor(t)+1} corresponding to the cubic spline parameter
@math{t=}@code{t-floor(t)} (@pxref{Bezier}). If @code{t} lies outside the range
[0,@code{length(p)}], it is first reduced modulo @code{length(p)}
in the case where @code{p} is cyclic or else converted to the corresponding
endpoint of @code{p}.

@cindex @code{dir}
@item pair dir(path, int n);
This returns the direction (as a pair) of the tangent to the path at
node @code{n}. If the path contains only one point, (0,0) is returned.

@item pair dir(path, real t);
This returns the direction of the tangent to the path at the point
between node @code{floor(t)} and @code{floor(t)+1} corresponding to the
cubic spline parameter @math{t=}@code{t-floor(t)} (@pxref{Bezier}).
If the path contains only one point, (0,0) is returned.

@cindex @code{precontrol}
@item pair precontrol(path, int n);
This returns the precontrol point of node @code{n}.

@item pair precontrol(path, real t);
This returns the effective precontrol point at parameter @code{t}.

@cindex @code{postcontrol}
@item pair postcontrol(path, int n);
This returns the postcontrol point of node @code{n}.

@item pair postcontrol(path, real t);
This returns the effective postcontrol point at parameter @code{t}.

@cindex @code{arclength}
@item real arclength(path);
This returns the length (in user coordinates) of the piecewise linear
or cubic curve that the path represents.

@anchor{arctime}
@cindex @code{arctime}
@item real arctime(path, real L);
This returns the path "time", a real number between 0 and the length of
the path in the sense of @code{point(path, real)}, at which the
cumulative arclength (measured from the beginning of the path) equals @code{L}.

@cindex @code{dirtime}
@item real dirtime(path, pair z);
This returns the first "time", a real number between 0 and the length of
the path in the sense of @code{point(path, real)}, at which the tangent
to the path has direction @code{z}, or -1 if the path never achieves
direction @code{z}.

@cindex @code{reverse}
@item path reverse(path p);
returns a path running backwards along p.

@cindex @code{subpath}
@item path subpath(path p, int n, int m);
returns the subpath running from node @code{n} to node @code{m}.
If @code{n} < @code{m}, the direction of the subpath is reversed.

@item path subpath(path p, real a, real b);
returns the subpath running from path time @code{a} to path time @code{b},
in the sense of @code{point(path, real)}. If @code{a} < @code{b}, the
direction of the subpath is reversed.

@cindex @code{intersect}
@item pair intersect(path p, path q, real fuzz=0);
If @code{p} and @code{q} have at least one intersection point, return a
pair of times representing the respective path times along
@code{p} and @code{q}, in the sense of @code{point(path, real)}, for
one such intersection point (as chosen by the algorithm described on
page 137 of @code{The MetaFontbook}). 
Perform the computations to the absolute error specified by @code{fuzz}, 
or, if @code{fuzz} is 0, to machine precision. If the paths do not 
intersect, return the pair @code{(-1,-1)}.

@cindex @code{intersectionpoint}
@item pair intersectionpoint(path p, path q, real fuzz=0);
This returns @code{point(p,intersect(p,q,fuzz).x)}, the actual point
of intersection.

@cindex @code{firstcut}
@cindex @code{slice}
@item slice firstcut(path p, path q);
Return the portions of path @code{p} before and after the first intersection
of @code{p} with path @code{q} as a structure @code{slice} (if no such
intersection exists, the entire path is considered to be `before' the
intersection):
@verbatim
struct slice {
  public path before,after;
}
@end verbatim

@cindex @code{MetaPost cutbefore}
Note that @code{firstcut.after} plays the role of the @code{MetaPost}
@code{cutbefore} command.

@cindex @code{lastcut}
@item slice lastcut(path p, path q);
Return the portions of path @code{p} before and after the last intersection
of @code{p} with path @code{q} as a @code{slice} (if no such
intersection exists, the entire path is considered to be `after' the
intersection).

@cindex @code{MetaPost cutafter}
Note that @code{lastcut.before} plays the role of the @code{MetaPost}
@code{cutafter} command.

@cindex @code{min}
@item pair min(path);
returns the pair(left,bottom) for the path bounding box.

@cindex @code{max}
@item pair max(path);
returns the pair(right,top) for the path bounding box.

@cindex @code{cyclic}
@item bool cyclic(path);
returns @code{true} iff path is cyclic

@cindex @code{straight}
@item bool straight(path, int i);
returns @code{true} iff the segment between node @code{i} and node @code{i+1}
is straight.

@cindex @code{inside}
@item bool inside(path g, pair z, pen p=currentpen);
returns @code{true} iff the point @code{z} is inside the region bounded
by the cyclic path @code{g} according to the fillrule of pen @code{p}
(@pxref{fillrule}). 

@end table

@end table

Finally, we point out an efficiency distinction in the use of guides and paths:
@verbatim
guide g;
for(int i=0; i < 10; ++i)
  g=g--(i,i);
path p=g;
@end verbatim

@noindent
runs in linear time, whereas
@verbatim
path p;
for(int i=0; i < 10; ++i)
  p=p--(i,i);
@end verbatim

@noindent
runs in quadratic time, as the entire path up to that point is copied at each
step of the iteration.

@node Pens
@section Pens

@cindex @code{pen}
@cindex @code{currentpen}
@cindex @code{MetaPost pickup}
In @code{Asymptote}, pens provide a context for the four basic drawing
commands (@pxref{Drawing commands}). They are used to specify the
following drawing attributes: color, line type, line width, line cap,
line join, fill rule, text alignment, font, font size, pattern,
overwrite mode, and calligraphic transforms on the pen nib. The
default pen used by the drawing routines is called
@code{currentpen}. This provides the same functionality as the
@code{MetaPost} command @code{pickup}.

@cindex @code{+}
@cindex @code{*}
Pens may be added together with the binary operator @code{+}.
This will mix the colors of the two pens.
All other non-default attributes of the rightmost pen will
override those of the leftmost pen. Thus, one can obtain a yellow
dashed pen by saying @code{dashed+red+green} or @code{red+green+dashed}
or @code{red+dashed+green}. The binary operator @code{*}
can be used to scale the color of a pen by a real number, until it
saturates with one or more color components equal to 1.

@itemize @bullet

@item Colors are specified using one of the following colorspaces:
@cindex color
@table @code
@item pen gray(real g) 
@cindex @code{gray}
@cindex grayscale
This produces a grayscale color, where the intensity @code{g} lies in the
interval [0,1], with 0.0 denoting black and 1.0 denoting white.

@item pen rgb(real r, real g, real b) 
@cindex @code{rgb}
This produces an @acronym{RGB} color, where each of the red, green,
and blue intensities @code{r}, @code{g}, @code{b}, lies in the interval [0,1].

@item pen cmyk(real c, real m, real y, real k) 
@cindex @code{cmyk}
This produces a @acronym{CMYK} color, where each of the cyan, magenta,
yellow, and black intensities @code{c}, @code{m}, @code{y}, @code{k},
lies in the interval [0,1].

@item pen invisible();
@cindex @code{invisible}
This special pen writes in invisible ink, but adjusts the bounding
box as if something had been drawn (like the @code{\phantom}
command in @TeX{}).

@end table

@cindex @code{defaultpen}
The default color is @code{black}; this may be changed with the routine
@code{defaultpen(pen)}. A number of named rgb colors are defined near
the top of the default base file @code{plain.asy}:
@verbatim
black,gray,white,red,green,blue,yellow,magenta,cyan,brown,darkgreen,
darkblue,orange,purple,chartreuse,fuchsia,salmon,lightblue,lavender,pink,
@end verbatim

@noindent
along with the primitive cmyk colors:
@verbatim
Cyan,Magenta,Yellow,Black.
@end verbatim

@cindex @code{colors}
The function @code{real[] colors(pen)} returns the color components of a pen.
The functions @code{pen gray(pen)}, @code{pen rgb(pen)},  and
@code{pen cmyk(pen)} return new pens obtained by converting their
arguments to the respective color spaces. 

@item Line types are specified with the function 
@code{pen linetype(string s, bool scale=true)},
@cindex @code{solid}
@cindex @code{dashed}
@cindex @code{dotted}
@cindex @code{longdashed}
@cindex @code{dashdotted}
@cindex @code{longdashdotted}
where @code{s} is a string of integer or real numbers separated by spaces.
The first number specifies how far (if @code{scale} is @code{true}, in
units of the pen linewidth; otherwise in @code{PostScript} units) to draw 
with the pen on, the second number specifies how far to draw with the pen off,
and so on (these spacings are automatically adjusted by @code{Asymptote}
to fit the arclength of the path). Here are the predefined line types:
@verbatim
pen solid=linetype("");
pen dotted=linetype("0 4");
pen dashed=linetype("8 8");
pen longdashed=linetype("24 8");
pen dashdotted=linetype("8 8 0 8");
pen longdashdotted=linetype("24 8 0 8");
@end verbatim
@image{linetype}

@cindex @code{defaultpen}
The default linetype is @code{solid}; this may be changed with
@code{defaultpen(pen)}.

@cindex @code{linewidth}
@cindex @code{defaultpen}
@item The pen line width is specified in @code{PostScript} units with
@code{pen linewidth(real)}. The default line width is 0.5 bp; this value
may be changed with @code{defaultpen(pen)}. 
For convenience, in @code{plain.asy} we define
@verbatim
static void defaultpen(real w) {defaultpen(linewidth(w));}
static pen operator +(pen p, real w) {return p+linewidth(w);}
static pen operator +(real w, pen p) {return linewidth(w)+p;}
@end verbatim
so that one may set the linewidth like this:
@verbatim
defaultpen(2);
pen p=red+0.5;
@end verbatim


@cindex @code{linecap}
@cindex @code{squarecap}
@cindex @code{roundcap}
@cindex @code{extendcap}
@cindex @code{defaultpen}
@item A pen with a specific @code{PostScript} line cap is returned on
calling @code{linecap} with an integer argument: 
@verbatim
pen squarecap=linecap(0);
pen roundcap=linecap(1);
pen extendcap=linecap(2);
@end verbatim

@noindent
The default line cap, @code{roundcap}, may be changed with
@code{defaultpen(pen)}.


@cindex @code{linejoin}
@cindex @code{miterjoin}
@cindex @code{roundjoin}
@cindex @code{beveljoin}
@item A pen with a specific @code{PostScript} join style is returned on
calling @code{linejoin} with an integer argument:
@verbatim
pen miterjoin=linejoin(0);
pen roundjoin=linejoin(1);
pen beveljoin=linejoin(2);
@end verbatim

@noindent
The default join style, @code{roundjoin}, may be changed with
@code{defaultpen(pen)}.

@cindex @code{fillrule}
@cindex @code{zerowinding}
@cindex @code{evenodd}
@cindex @code{zerowindingoverlap}
@cindex @code{evenoddoverlap}
@anchor{fillrule}
@item A pen with a specific @code{PostScript} fill rule is returned on
calling @code{fillrule} with an integer argument:
@verbatim
pen zerowinding=fillrule(0);
pen evenodd=fillrule(1);
pen zerowindingoverlap=fillrule(2);
pen evenoddoverlap=fillrule(3);
@end verbatim

@noindent
The fill rule, which identifies the algorithm used to determine the
insideness of a path or array of paths, only affects the @code{clip},
@code{fill}, and @code{inside} functions. For the @code{zerowinding}
fill rule, a point @code{z} is outside the region bounded by a path if
the number of upward intersections of the path with the horizontal
line @code{z--z+infinity} minus the number of downward intersections
is zero. For the @code{evenodd} fill rule, @code{z} is considered to
be outside the region if the total number of such intersections is even.
A label is considered to be inside the region only if all four
corners of its (possibly rotated) bounding box are within the region.
The fill rules @code{zerowindingoverlap} and @code{evenoddoverlap}
are respectively identical to @code{zerowinding} and @code{evenodd},
except that a label is considered to be inside the region whenever
its center is within the region. While this allows labels to
extend beyond the clipping region, any actual overlap is ignored when
determining picture bounds. The default fill rule, @code{zerowinding}, may
be changed with @code{defaultpen(pen)}.

@cindex @code{nobasealign}
@cindex @code{basealign}
@anchor{basealign}
@item A pen with a specific text alignment setting is returned on
calling @code{basealign} with an integer argument:
@verbatim
pen nobasealign=basealign(0);
pen basealign=basealign(1);
@end verbatim

@noindent
The default setting, @code{nobasealign},which may be changed with
@code{defaultpen(pen)}, causes the label alignment routines to use the
full label bounding box for alignment. In contrast, @code{basealign}
requests that the @TeX{} baseline be respected.

@cindex @code{fontsize}
@cindex @code{lineskip}
@cindex @code{baselineskip}
@cindex @code{defaultpen}
@cindex @code{type1cm}
@item The font size is specified in @TeX{} points (1 pt = 1/72.27 inches) with
the function @code{pen fontsize(real size, real baselineskip=1.2*size)}.
The default font size, 12pt, may be changed with @code{defaultpen(pen)}.
Nonstandard font sizes may require inserting
@verbatim
import fontsize;
@end verbatim
at the beginning of the file.

@cindex @code{font}
@cindex @code{LaTeX fonts}
@cindex @code{NFSS}
@item A pen using a specific @code{LaTeX} @code{NFSS} font is returned
by calling the function @code{pen font(string encoding, string family,
string series="m", string shape="n")}. The default setting,
@code{font("OT1","cmr","m","n")}, corresponds to 12pt Computer Modern Roman;
this may be changed with @code{defaultpen(pen)}. 

@cindex @code{TeX fonts}
Alternatively, one may select a fixed-size @code{TeX} font (on which
@code{fontsize} has no effect) like @code{"cmr12"} (12pt Computer Modern
Roman) or @code{"pcrr"} (Courier) using the function @code{pen font(string
name)}. An optional size argument can also be given to scale the font
to the requested size: @code{pen font(string name, real size)}.

@cindex @code{PostScript fonts}
A convenient interface to the following standard @code{PostScript}
fonts is also provided:
@verbatim
pen AvantGarde(string series="m", string shape="n");
pen Bookman(string series="m", string shape="n");
pen Courier(string series="m", string shape="n");
pen Helvetica(string series="m", string shape="n");
pen NewCenturySchoolBook(string series="m", string shape="n");
pen Palatino(string series="m", string shape="n");
pen TimesRoman(string series="m", string shape="n");
pen ZapfChancery(string series="m", string shape="n");
pen Symbol(string series="m", string shape="n");
pen ZapfDingbats(string series="m", string shape="n");
@end verbatim

@cindex patterns
@cindex tilings
@item @code{PostScript} commands within a @code{picture} may be used
to create a tiling pattern, identified by the string @code{name}, for
@code{fill} and @code{draw} operations by adding it to the default
@code{PostScript} preamble frame @code{patterns},
with optional left-bottom margin @code{lb} and right-top margin @code{rt}.
@verbatim
void add(frame preamble=patterns, string name, picture pic, pair lb=0,
         pair rt=0)
@end verbatim

To @code{fill} or @code{draw} using pattern @code{name}, use
the pen @code{pattern("name")}. For example, rectangular tilings
can be constructed using the routines 
@code{picture tile(real Hx=5mm, real Hy=0, pen p=currentpen,
filltype filltype=NoFill)},
@code{picture checker(real Hx=5mm, real Hy=0, pen p=currentpen)}, and
@code{picture brick(real Hx=5mm, real Hy=0, pen p=currentpen)} defined in
@code{patterns.asy}:
@cindex grid
@cindex tile
@cindex checker
@cindex brick
@verbatiminclude tile.asy
@image{tile}

@cindex hatch
@cindex crosshatch
Hatch patterns can be generated with the routines
@code{picture hatch(real H=5mm, pair dir=NE, pen p=currentpen)},
@code{picture crosshatch(real H=5mm, pen p=currentpen)}:
@verbatiminclude hatch.asy
@image{hatch}

You may need to turn off aliasing in your @code{PostScript} viewer for
patterns to appear correctly. Custom patterns can easily be constructed,
following the examples in @code{pattern.asy}. The tiled pattern can
even incorporate shading (@pxref{gradient shading}), as illustrated
in this example (not included in the manual because not all printers support
@code{PostScript} 3):
@verbatiminclude shadedtiling.asy

@anchor{overwrite}
@cindex @code{overwrite}
@item One can prevent labels from overwriting one another by using
the pen attribute @code{overwrite}, which takes a single argument:

@table @code
@cindex @code{Allow}
@cindex @code{defaultpen}
@item Allow
Allow labels to overwrite one another. This is the default behaviour (unless
overridden with @code{defaultpen(pen)}.

@cindex @code{Suppress}
@item Suppress
Suppress, with a warning, each label that would overwrite another label.

@cindex @code{SuppressQuiet}
@item SuppressQuiet
Suppress, without warning, each label that would overwrite another label.

@cindex @code{Move}
@item Move
Move a label that would overwrite another out of the way and issue a warning.
As this adjustment is during the final output phase (in @code{PostScript}
coordinates) it could result in a larger figure than requested.

@cindex @code{MoveQuiet}
@item MoveQuiet
Move a label that would overwrite another out of the way, without warning.
As this adjustment is during the final output phase (in @code{PostScript}
coordinates) it could result in a larger figure than requested.

@end table

@end itemize

@cindex @code{defaultpen}
@cindex @code{resetdefaultpen}
The routine @code{defaultpen()} returns the current default pen attributes.
Calling the routine @code{resetdefaultpen()} resets all pen default
attributes to their initial values.

@node Transforms
@section Transforms

@cindex @code{transform}
@code{Asymptote} makes extensive use of affine transforms. A pair
@code{(x,y)} is transformed by the transform 
@code{t=(t.x,t.y,t.xx,t.xy,t.yx,t.yy)} to @code{(x',y')}, where
@verbatim
x' = t.x + t.xx * x + t.xy * y
y' = t.y + t.yx * x + t.yy * y
@end verbatim
Transforms can be applied to pairs, guides, paths, pens,
transforms, frames, and pictures by multiplication (via the binary operator
@code{*}) on the left (@pxref{circle} for an example).
Transforms can be composed with one another and inverted with the
function @code{transform inverse(transform)}; they can also be raised to any
integer power with the @code{^} operator.

The built-in transforms are:

@table @code
@item identity();
@cindex @code{identity}
the identity transform;
@item shift(pair z);
@cindex @code{shift}
translates by the pair @code{z};
@item xscale(real x);
@cindex @code{xscale}
scales by @code{x} in the @math{x} direction;
@item yscale(real y);
@cindex @code{yscale}
scales by @code{y} in the @math{y} direction;
@item scale(real s);
@cindex @code{scale}
scale by @code{s} in both @math{x} and @math{y} directions;
@item slant(real s);
@cindex @code{slant}
maps @code{(x,y)} --> @code{(x+s*y,y)};
@item rotate(real angle, pair z=(0,0));
rotates by @code{angle} in degrees about @code{z};
@item reflect(pair a, pair b);
@cindex @code{reflect}
reflects about the line @code{a--b}.
@end table

The implicit initializer for transforms is @code{identity()}.

@node Frames and pictures
@section Frames and pictures

@table @code

@item frame
@cindex @code{frame}
@cindex @code{newframe}
Frames are canvases for drawing in @code{PostScript} coordinates. While working
with frames directly is occasionally necessary for constructing deferred
drawing routines, pictures are usually more convenient to work with.
The implicit initializer for frames is @code{newframe}. The function
@code{bool empty(frame f)} returns @code{true} only if the frame @code{f}
is empty. The functions @code{min(frame f)} and @code{max(frame f)} return the
(left,bottom) and (right,top) coordinates of the frame bounding box,
respectively. The contents of frame @code{src} may be appended to
frame @code{dest} with the command
@verbatim
void add(frame dest, frame src);
@end verbatim
or prepended with
@verbatim
void prepend(frame dest, frame src);
@end verbatim
A frame obtained by aligning frame @code{f} in the direction
@code{dir}, in a manner analogous to the @code{align} argument of
@code{label} (@pxref{label}), is returned by
@verbatim
frame align(frame f, pair dir);
@end verbatim

@item picture
@cindex @code{picture}
Pictures are high-level structures (@pxref{Structures}) defined in
@code{plain.asy} that provide canvases for drawing in user coordinates. 
The default picture is called @code{currentpicture}. A new picture
can be created like this:
@verbatim
picture pic;
@end verbatim
@noindent
Anonymous pictures can be made by the expression @code{new picture}.

The @code{size} routine specifies the dimensions of the desired picture:

@anchor{size}
@cindex @code{size}
@verbatim
void size(picture pic=currentpicture, real x, real y,
          bool keepAspect=Aspect);
@end verbatim

If the @code{x} and @code{y} sizes are both 0, user coordinates will be
interpreted as @code{PostScript} coordinates. In this case, the transform
mapping @code{pic} to the final output frame is @code{identity()}.

If exactly one of @code{x} or @code{y} is 0, no size restriction
is imposed in that direction; it will be scaled the same as the other
direction.

If @code{keepAspect} is set to @code{Aspect} or @code{true},
the picture will be scaled with its aspect ratio preserved such that
the final width is no more than @code{x} and the final height is
no more than @code{y}.

If @code{keepAspect} is set to @code{IgnoreAspect} or @code{false},
the picture will be scaled in both directions so that the final width
is @code{x} and the height is @code{y}. 

To ensure that each dimension is no more than @code{size}, use the routine 
@verbatim
void size(picture pic=currentpicture, real size,
          bool keepAspect=Aspect);
@end verbatim

A picture can be fit to a frame and converted into a @code{PostScript} image
by calling the function @code{shipout}:
@anchor{shipout}
@cindex @code{shipout}
@verbatim
void shipout(string prefix=defaultfilename, picture pic,
             frame preamble=patterns,
             orientation orientation=Portrait,
             string format="", bool wait=NoWait, bool quiet=false);
void shipout(string prefix=defaultfilename,
             orientation orientation=Portrait,
             string format="", bool wait=NoWait, bool quiet=false);
@end verbatim
@noindent
A @code{shipout()} command is added implicitly at file exit if no
previous @code{shipout} commands have been executed.

@cindex subpictures
@cindex @code{fit}
@cindex @code{picture alignment}
A picture @code{pic} can be explicitly fit to a frame by calling
@verbatim
frame pic.fit(real xsize=pic.xsize, real ysize=pic.ysize,
              bool keepAspect=pic.keepAspect);
@end verbatim
The default size and aspect ratio settings are those given to the
@code{size} command (which default to @code{0}, @code{0}, and
@code{true}, respectively).

@cindex portrait mode
@cindex landscape mode
@cindex seascape mode
The default page orientation is @code{Portrait}. To output in landscape
mode, simply replace the call to @code{shipout()} with:
@verbatim
shipout(Landscape);
@end verbatim

To rotate in the other direction, replace @code{Landscape} with
@code{Seascape}.

@cindex @code{box}
To draw a bounding box with margins around a picture, fit the
picture to a frame using the function
@verbatim
frame bbox(picture pic=currentpicture, real xmargin=0,
           real ymargin=xmargin, pen p=currentpen,
           filltype filltype=NoFill);
@end verbatim
@anchor{filltype}
Here @code{filltype} specifies one of the following fill types:
@table @code
@cindex @code{Fill}
@item Fill
Fill with the pen used to draw the boundary.

@item Fill(pen p=nullpen)
If @code{p} is @code{nullpen}, fill with the pen used to draw the
boundary; otherwise fill with pen @code{p}.

@cindex @code{NoFill}
@item NoFill
Do not fill; draw only the boundary.

@cindex @code{UnFill}
@item UnFill
Clip the region.

@cindex @code{UnFill(real xmargin=0, real ymargin=xmargin}
@item UnFill
Clip the region and surrounding margins @code{xmargin} and @code{ymargin}.

@end table

For example, to draw a bounding box around a picture with a 0.25 cm
margin and output the resulting frame, use the command:
@verbatim
shipout(bbox(0.25cm));
@end verbatim
A @code{picture} may be fit to a frame with the background color of
pen @code{p} with the function @code{bbox(p,Fill)}. 

The function 
@verbatim
pair point(picture pic=currentpicture, pair dir);
@end verbatim
is a convenient way of determining the point on the boundary of the
user-coordinate bounding box of @code{pic} in the direction @code{dir}
relative to its center.

The member functions @code{pic.min()} and @code{pic.max()} calculate
the @code{PostScript} bounds that picture @code{pic} would have if it were
currently fit to a frame using its default size specification.

@anchor{add}
Sometimes it is useful to draw objects on separate pictures and add one
picture to another using the @code{add} function:
@cindex @code{add}
@verbatim
void add(picture src, bool group=true,
         filltype filltype=NoFill, bool put=Above);
void add(picture dest, picture src, bool group=true,
         filltype filltype=NoFill, bool put=Above);
@end verbatim

The first example adds @code{src} to @code{currentpicture}; the second
one adds @code{src} to @code{dest}. 
The @code{group} option specifies whether or not the graphical user
interface @code{xasy} should treat all of the elements of @code{src}
as a single entity (@pxref{GUI}), @code{filltype} requests optional
background filling or clipping, and @code{put} specifies
whether to add @code{src} above or below existing objects.

There are also routines to add a picture or frame @code{src} specified
in postscript coordinates to another picture about the user coordinate
@code{origin}:
@anchor{add about}
@cindex @code{add}
@verbatim
void add(pair origin, picture dest, picture src, bool group=true,
         filltype filltype=NoFill, bool put=Above);
void add(pair origin, picture src, bool group=true,
         filltype filltype=NoFill, bool put=Above);
void add(pair origin=0, picture dest=currentpicture, frame src,
         bool group=true, filltype filltype=NoFill,
         bool put=Above);
void add(pair origin=0, picture dest=currentpicture, frame src,
         pair dir, bool group=true, filltype filltype=NoFill,
         bool put=Above);
@end verbatim

The @code{dir} argument in the last form specifies a direction to use
for aligning the frame, in a manner analogous to the @code{align}
argument of @code{label} (@pxref{label}). 
Illustrations of frame alignment can be found in the
examples @ref{errorbars} and @ref{image}. If you want to align 3 or
more subpictures, group them two at a time:

@verbatiminclude subpictures.asy
@image{subpictures}

Alternatively, one can use @code{attach} to automatically increase the
size of picture @code{dest} to accommodate adding a frame @code{src}
about the user coordinate @code{origin}:
@verbatim
void attach(pair origin=0, picture dest=currentpicture,
           frame src, bool group=true,
           filltype filltype=NoFill, bool put=Above);
void attach(pair origin=0, picture dest=currentpicture, frame src,
            pair dir, bool group=true, filltype filltype=NoFill,
            bool put=Above);
@end verbatim

To draw or fill a box or ellipse around a label, frame, or picture,
use one of the routines (the first two routines for convenience also
return the boundary as a guide):
@verbatim
guide box(frame f, Label L="", real xmargin=0,
          real ymargin=xmargin, pen p=currentpen,
          filltype filltype=NoFill, bool put=Above);
guide ellipse(frame f, Label L="", real xmargin=0,
              real ymargin=xmargin, pen p=currentpen,
              filltype filltype=NoFill, bool put=Above);
void box(picture pic=currentpicture, Label L,
         real xmargin=0, real ymargin=xmargin, pen p=currentpen,
         filltype filltype=NoFill, bool put=Above);
@end verbatim

@cindex @code{erase}
To erase the contents of a picture (but not the size specification), use
the function
@verbatim
void erase(picture pic=currentpicture);
@end verbatim

@cindex @code{save}
To save a snapshot of @code{currentpicture}, @code{currentpen}, and
@code{currentprojection}, use the function @code{save()}.

@cindex @code{restore}
To restore a snapshot of @code{currentpicture}, @code{currentpen}, and
@code{currentprojection}, use the function @code{restore()}.

Many further examples of picture and frame operations are provided in
the base file @code{plain.asy}.

@cindex verbatim
@cindex @code{postscript}
It is possible to insert verbatim @code{PostScript} commands in a picture with
the routine
@verbatim
void postscript(picture pic=currentpicture, string s);
@end verbatim

@anchor{tex}
@cindex @code{tex}
Verbatim @TeX{} commands can be inserted in the intermediate
@code{LaTeX} output file with the function 
@verbatim
void tex(picture pic=currentpicture, string s);
@end verbatim

To issue a global @TeX{} command (such as a @TeX{} macro definition) in the
@TeX{} preamble (valid for the remainder of the top-level module) use:
@cindex @code{texpreamble}
@verbatim
void texpreamble(string s);
@end verbatim

@end table

@node Files
@section Files

@cindex @code{file}
@code{Asymptote} can read and write text files (including comma-separated
value) files and portable @acronym{XDR} (External Data Representation)
binary files.

An input file must first be opened with 
@code{input(string, bool check=true, string commentchar="#")};
reading is then done by assignment:
@cindex open
@cindex @code{input}
@cindex reading
@verbatim
file fin=input("test.txt");
real a=fin;
@end verbatim

@cindex comment character
@cindex @code{error}
If the optional boolean argument @code{check} is @code{false}, no check will
be made that the file exists. If the file does not exist or is not
readable, the function @code{bool error(file)} will return @code{true}.
The string @code{commentchar} specifies a comment character
(the default comment character @code{#} is actually determined by the variable
@code{commentchar} in @code{plain.asy}). If this character is
encountered in a data file, the remainder of the line is ignored. When
reading strings, the comment character must be in the first column
(otherwise it will treated as an ordinary character).

@cindex @code{cd}
@cindex directory
One can change the current working directory with the
@code{string cd(string)} function, which returns the new working directory.

@cindex @code{getc}
When reading pairs, the enclosing parenthesis are optional.
Strings are also read by assignment, by reading characters up to but not
including a newline. In addition, @code{Asymptote} provides the function
@code{string getc(file)} to read the next character only, returning it
as a string.

@cindex @code{output}
@cindex @code{append}
@cindex @code{write}
A file named @code{name} can be open for output with
@verbatim
file output(string name, bool append=false);
@end verbatim
@noindent
data will be appended to an existing file only if the file is opened with
@code{append=true}.
Data of type @code{T} can be written to an output file by calling one
of the following functions
@verbatim
write(string s="", T x, suffix e=endl);
write(file fout, string s="", T x, suffix e=none);
write(string s="" ... T[] x);
write(file fout, string s="" ... T[] x);
write(file fout=stdout, suffix e=endl);
@end verbatim
@cindex @code{none}
@cindex @code{endl}
@cindex @code{tab}
If the @code{fout} is not specified, @code{stdout} is used and
terminated with a newline. If specified, the optional
identifying string @code{s} is written before the data @code{x}.
Except when writing objects that may generate multiple lines of
output (like arrays or guides), an arbitrary number of data values may
be given. The suffix @code{e} may be one of the following:
@code{none} (do nothing), @code{endl} (terminate with a newline), or
@code{tab} (terminate with a tab). Here is a simple example of data output:
@verbatim
file fout=output("test.txt");
write(fout,1);                  // Writes "1"
write(fout);                    // Writes a new line
write(fout,"List: ",1,2,3);     // Writes "List: 1     2     3"
@end verbatim
@noindent

@cindex @code{stdin}
@cindex @code{stdout}
There are two special files: @code{stdin}, which reads from the keyboard,
and @code{stdout}, which writes to the terminal.

@cindex @code{xinput}
@cindex @code{xoutput}
@cindex @code{single}
@cindex @code{double}
A file may also be opened with @code{xinput} or @code{xoutput} instead of
@code{input} or @code{output}, in which case it will read or write
double precision values written in Sun Microsystem's @acronym{XDR} (External
Data Representation) portable binary format (available on all UNIX platforms).
The function @code{file single(file)} sets the file to read single
precision @acronym{XDR} values; calling @code{file single(file,false)} sets it
back to read doubles again. The default initializer for file is @code{stdout}.

@cindex @code{eof}
@cindex @code{eol}
@cindex @code{error}
@cindex @code{flush}
@cindex @code{clear}
@cindex @code{precision}
One can test a file for end-of-file with the boolean function @code{eof(file)},
end-of-line with @code{eol(file)}, and for I/O errors with @code{error(file)}.
One can flush the output buffers with @code{flush(file)}, clear a
previous I/O error with @code{clear(file)}, and close the file with
@code{close(file)}. To set the number of digits of output precision, use
@code{precision(file,int)}.

The routines
@verbatim
string getstring(string name, string default="", string prompt="",
                 string prefix=getstringprefix, bool save=true);
real getreal(string name, real default=0, string prompt="",
             string prefix=getstringprefix, bool save=true);
@end verbatim
@noindent
defined in @code{plain.asy} may be used to read a value from @code{stdin}.
If @code{save=true}, the value is saved to the file named
@code{prefix+name}, to provide the default value for subsequent runs.
The default value (initially @code{default}) is displayed after @code{prompt}.
The initial value of @code{getstringprefix} is ".asy_".


@node Structures
@section Structures
@cindex @code{struct}
@cindex structures
@cindex @code{public}
@cindex @code{private}
@cindex @code{this}
@cindex @code{new}

Users may also define their own data types as structures, along with
user-defined operators, much as in C++. By default, structure
members are read-only when referenced outside the structure, but may be
optionally declared @code{public} (read-write) or @code{private} (read
and write allowed only inside the structure). The virtual structure @code{this}
refers to the enclosing structure. Any code at the top-level scope
within the structure is executed on initialization. 

A default initializer for a structure @code{S} can be defined by
creating a function @code{S operator init()}. This can be used to
initialize each instance of @code{S} with @code{new S} (which creates
a new anonymous instance of @code{S}).

@cindex @code{operator init}
@cindex @code{new}
@verbatim
struct S {
  public real a=1;
  real f(real a) {return a+this.a;}
}

S operator init() {return new S;}

S s;                            // Initializes s with S operator init();

write(s.f(2));                  // Outputs 3

S operator + (S s1, S s2)
{
  S result;
  result.a=s1.a+s2.a;
  return result;
}

write((s+s).f(0));              // Outputs 2

@end verbatim

@cindex constructors
In the following example, the static function @code{T.T(real x)}
is a constructor that initializes and returns a new instance of @code{T}:

@verbatim
struct T {
  real x;
  static T T(real x) {T t=new T; t.x=x; return t;}
}

T operator init() {return new T;}

T a;
T b=T.T(1);

write(a.x);                     // Outputs 0
write(b.x);                     // Outputs 1
@end verbatim
@noindent
The name of the constructor need not be identical to the name of the structure;
for example, see @code{triangle.SAS} in @code{geometry.asy}.

Structure assignment does a shallow copy; a deep copy requires writing
an explicit @code{copy()} member. The function @code{bool alias(T,T)} checks to
see if two instances of the structure @code{T} are identical.
The boolean operators @code{==} and @code{!=} are by default equivalent to
@code{alias} and @code{!alias} respectively, but may be overwritten
for a particular type do a deep comparison.

When @code{a} is defined both as a variable and a type, the qualified
name @code{a.b} refers to the variable instead of the type.

@cindex inheritance
@cindex virtual functions
Much like in C++, casting (@pxref{Casts}) provides for an elegant
implementation of structure inheritance, including virtual functions:
@verbatim
struct parent {
  real x=1;
  public void virtual(int) {write (0);}
  void f() {virtual(1);}
}

parent operator init() {return new parent;}
  
void write(parent p) {write(p.x);}
  
struct child {
  parent parent;
  real y=2;
  void virtual(int x) {write (x);}
  parent.virtual=virtual;
  void f()=parent.f;
}

parent operator cast(child child) {return child.parent;}
  
child operator init() {return new child;}

parent p;
child c;

write(c);                       // Outputs 1;

p.f();                          // Outputs 0;
c.f();                          // Outputs 1;

write(c.parent.x);              // Outputs 1;
write(c.y);                     // Outputs 2;
@end verbatim

Further examples of structures are @code{Legend} and @code{picture} in
the default @code{Asymptote} base file @code{plain.asy}.

@node Operators
@section Operators
@cindex operators

@menu
* Arithmetic & logical::        Basic mathematical operators
* Self & prefix operators::     Increment and decrement
* User-defined operators::      Overloading operators
@end menu

@node Arithmetic & logical
@subsection Arithmetic & logical operators
@cindex arithmetic operators
@cindex binary operators
@cindex boolean operators
@cindex logical operators
@cindex integer division
@cindex @code{quotient}

@code{Asymptote} uses the standard binary arithmetic operators.
However, when one integer is divided by another, both arguments are
converted to real values before dividing and a real quotient is
returned (since this is usually what is intended). The function
@code{int quotient(int x, int y)} returns the greatest integer less
than or equal to @code{x/y}. In all other cases both operands are
promoted to the same type, which will also be the type of the result:
@table @code
@cindex @code{+}
@item +
addition
@cindex @code{-}
@item -
subtraction
@cindex @code{*}
@item *
multiplication
@cindex @code{/}
@item /
division
@cindex @code{%}
@item %
modulo; the result always has the same sign as the divisor. 
In particular, this makes @code{q*quotient(p,q)+p%q == p} for all
integers @code{p} and nonzero integers @code{q}.
@cindex @code{^}
@item ^
@cindex @code{**}
power; if the exponent (second argument) is an int, recursive
multiplication is used; otherwise, logarithms and exponentials are used.
@code{**} is a synonym for @code{^}.

@end table

The usual boolean operators are also defined:
@table @code
@cindex @code{==}
@item ==
equals
@cindex @code{!=}
@item !=
not equals
@cindex @code{<}
@item <
less than
@cindex @code{<=}
@item <=
less than or equals
@cindex @code{>=}
@item >=
greater than or equals
@cindex @code{>}
@item >
greater than
@cindex @code{&&}
@item &&
and
@cindex @code{||}
@item ||
or
@cindex @code{^}
@item ^
xor
@cindex @code{!}
@item !
not
@end table

@code{Asymptote} also supports the C-like conditional syntax:
@verbatim
bool positive=(pi >= 0) ? true : false;
@end verbatim


@node Self & prefix operators
@subsection Self & prefix operators
@cindex self operators
@cindex prefix operators
@cindex @code{+=}
@cindex @code{-=}
@cindex @code{*=}
@cindex @code{/=}
@cindex @code{%=}
@cindex @code{^=}
@cindex @code{++}
@cindex @code{--}

As in C, each of the arithmetic operators @code{+}, @code{-}, @code{*},
@code{/}, @code{%}, and @code{^} can be used as a self operator. 
The prefix operators @code{++} (increment by one) and @code{--} (decrement
by one) are also defined.
For example,
@verbatim
int i=1;
i += 2;
int j=++i;
@end verbatim

@noindent
is equivalent to the code
@verbatim
int i=1;
i=i+2;
int j=i=i+1;
@end verbatim

@cindex postfix operators
However, postfix operators like @code{i++} and @code{i--} are not defined
(because of the inherent ambiguities that would arise with the @code{--}
path-joining operator). In the rare instances where @code{i++} 
and @code{i--} are really needed, one can substitute the expressions
@code{(++i-1)} and @code{(--i+1)}, respectively.

@node User-defined operators
@subsection User-defined operators
@cindex user-defined operators
@cindex @code{operator}
The following symbols may be used with @code{operator} to define or redefine
operators on structures and built-in types:
@verbatim
- + * / % ^ ! < > == != <= >= & && || ^^ .. :: -- --- ++
<< >> $ $$ @ @@
@end verbatim
@noindent
The operators on the second line have precedence one higher than the
boolean operators @code{<}, @code{>}, @code{<=}, and @code{>=}.

Guide operators like @code{..} may be overloaded, say, to write
a user function that produces a new guide from a given guide:
@verbatim
guide dots(...guide[] g)=operator ..;

guide operator ..(...guide[] g) {
  guide G;
  if(g.length > 0) {
    write(g[0]);
    G=g[0];
  }
  for(int i=1; i < g.length; ++i) {
    write(g[i]);
    write();
    G=dots(G,g[i]);
  }
  return G;
}

guide g=(0,0){up}..{SW}(100,100){NE}..{curl 3}(50,50)..(10,10);
write("g=",none);
write(g);
@end verbatim

@node Implicit scaling
@section Implicit scaling
@cindex implicit scaling

If a numeric literal is in front of certain types of expressions, then the two 
are multiplied:
@verbatim
int x=2;
real y=2.0;
real cm=72/2.540005;

write(3x);
write(2.5x);
write(3y);
write(-1.602e-19 y);
write(0.5(x,y));
write(2x^2);
write(3x+2y);
write(3(x+2y));
write(3sin(x));
write(3(sin(x))^2);
write(10cm);
@end verbatim

This produces the output
@verbatim
6
5
6
-3.204e-19
(1,1)
16
10
18
2.72789228047704
7.44139629388625
283.464008929116
@end verbatim

@node Functions
@section Functions
@cindex functions

@code{Asymptote} functions are treated as variables with a signature 
(non-function variables have null signatures). Variables with the 
same name are allowed, so long as they have distinct signatures. 

Functions arguments are passed by value. To pass an argument by
reference, simply enclose it in a structure (@pxref{Structures}).

Here are some examples of @code{Asymptote} functions:

@enumerate
@item Two distinct variables:
@verbatim
int x, x();           
x=5;
x=new int() {return 17;};
x=x();              // calls x() and puts the result, 17, in the scalar x
@end verbatim

@item Traditional function definitions are allowed:
@verbatim
int sqr(int x)  
{
  return x*x;
}
sqr=null;           // but the function is still just a variable.
@end verbatim

@item Casting can be used to resolve ambiguities:
@verbatim
int a, a(), b, b(); // Valid: creates four variables.
a=b;                // Invalid: assignment is ambiguous.
a=(int) b;          // Valid: resolves ambiguity.
(int) (a=b);        // Valid: resolves ambiguity.
(int) a=b;          // Invalid: cast expressions cannot be L-values.

int c();
c=a;                // Valid: only one possible assignment.
@end verbatim

@item Anonymous (so-called "high-order") functions are also allowed:
@cindex @code{typedef}
@verbatim
typedef int intop(int);
intop adder(int m)
{
  return new int(int n) {return m+n;};
}
intop addby7=adder(7);
write(addby7(1));   // Writes 8.
@end verbatim

@cindex function declarations
@item Anonymous functions can be used to redefine a function variable 
that has been declared (and implicitly initialized to the null function)
but not yet explicitly defined:
@verbatim
void f(bool b);

void g(bool b) {
  if(b) f(b);
  else write(b);
}

f=new void(bool b) {
  write(b);
  g(false);
};

g(true);
@end verbatim

@end enumerate

@code{Asymptote} is the only language we know of that treats functions
as variables, but allows overloading by distinguishing variables
based on their signatures.  

@cindex @code{libsigsegv}
@anchor{stack overflow}
@cindex recursion
@cindex stack overflow
Functions are allowed to call themselves recursively. As in C++, infinite
nested recursion will generate a stack overflow (reported as a
segmentation fault, unless the @acronym{GNU} library @code{libsigsegv} is
installed at configuration time). 

@menu
* Default arguments::           Default values can appear anywhere
* Named arguments::             Assigning function arguments by keyword
* Rest arguments::              Functions with a variable number of arguments
* Mathematical functions::      Standard libm functions

@end menu

@node Default arguments
@subsection Default arguments
@cindex default arguments
@cindex arguments

@code{Asymptote} supports a more flexible mechanism for default function
arguments than C++: they may appear anywhere in the function prototype.
Because certain data types are implicitly cast to more sophisticated
types (@pxref{Casts}) one can often avoid ambiguities by ordering
function arguments from the simplest to the most complicated.
For example, given
@verbatim
real f(int a=1, real b=0) {return a+b;}
@end verbatim
@noindent
then @code{f(1)} returns 1.0, but @code{f(1.0)} returns 2.0.

The value of a default argument is determined by evaluating the
given @code{Asymptote} expression in the scope where the called
function is defined.

@node Named arguments
@subsection Named arguments
@cindex keywords
@cindex named arguments

It is sometimes difficult to remember the order in which arguments
appear in a function declaration. Named (keyword) arguments make calling
functions with multiple arguments easier. Unlike in the C and C++
languages, an assignment in a function argument is interpreted as an
assignment to a parameter of the same name in the function signature,
@emph{not within the local scope}. The command-line option @code{-d}
may be used to check @code{Asymptote} code for cases where a 
named argument may be mistaken for a local assignment.

When matching arguments to signatures, first all of the keywords are
matched, then the arguments without names are matched against the
unmatched formals as usual. For example,
@verbatim
int f(int x, int y) {
  return 10x+y;
}
write(f(4,x=3));
@end verbatim
@noindent 
output 34, as @code{x} is already matched when we try to match the
unnamed argument @code{4}, so it gets matched to the next item, @code{y}. 

For the rare occasions where it is desirable to assign a value to
local variable within a function argument (generally @emph{not} a good
programming practice), simply enclose the assignment in
parentheses. For example, given the definition of @code{f} in the
previous example,
@verbatim
int x;
write(f(4,(x=3)));
@end verbatim
@noindent
is equivalent to the statements
@verbatim
int x;
x=3;
write(f(4,3));
@end verbatim
@noindent
and outputs 43.

As a technical detail, we point out that, since variables of the same
name but different signatures are allowed in the same scope, the code
@verbatim
int f(int x, int x()) {
  return x+x();
}
int seven() {return 7;}
@end verbatim
@noindent
is legal in @code{Asymptote}, with @code{f(2,seven)} returning 9.
A named argument matches the first unmatched formal of the same name, so
@code{f(x=2,x=seven)} is an equivalent call, but @code{f(x=seven,2)}
is not, as the first argument is matched to the first formal, and
@code{int ()} cannot be implicitly cast to @code{int}.  Default
arguments do not affect which formal a named argument is matched to,
so if @code{f} were defined as
@verbatim
int f(int x=3, int x()) {
  return x+x();
}
@end verbatim
@noindent
then @code{f(x=seven)} would be illegal, even though @code{f(seven)}
obviously would be allowed.

@node Rest arguments
@subsection Rest arguments
@cindex rest arguments

Rest arguments allow one to write functions that take a variable
number of arguments:
@verbatim
// This function sums its arguments.
int sum(... int[] nums) {
  int total=0; 
  for (int i=0; i < nums.length; ++i)
    total += nums[i];
  return total;
}

sum(1,2,3,4);                       // returns 10
sum();                              // returns 0

// This function subtracts subsequent arguments from the first.
int subtract(int start ... int[] subs) {
  for (int i=0; i < subs.length; ++i)
    start -= subs[i];
  return start;
}

subtract(10,1,2);                   // returns 7
subtract(10);                       // returns 10
subtract();                         // illegal
@end verbatim
  
@cindex packing 
Putting an argument into a rest array is called @emph{packing}.
One can give an explicit list of arguments for the rest
argument, so @code{subtract} could alternatively be implemented as
@verbatim
int subtract(int start ... int[] subs) {
  return start - sum(... subs);
}
@end verbatim
  
One can even combine normal arguments with rest arguments:
@verbatim
sum(1,2,3 ... new int[] {4,5,6});   // returns 21
@end verbatim
@noindent
@cindex unpacking
This builds a new six-element array that is passed to @code{sum} as
@code{nums}. The opposite operation, @emph{unpacking}, is not allowed:
@verbatim
subtract(... new int[] {10, 1, 2});
@end verbatim
@noindent
is illegal, as the start formal is not matched.

If no arguments are packed, then a zero-length array (as opposed to
@code{null}) is bound to the rest parameter. Note that default
arguments are ignored for rest formals and the rest argument is not
bound to a keyword.

The overloading resolution in @code{Asymptote} is similar to the
function matching rules used in C++. Every argument match is given a
score.  Exact matches score better than matches with casting, and
matches with formals (regardless of casting) score better than packing
an argument into the rest array.  A candidate is maximal if all of the
arguments score as well in it as with any other candidate.  If there
is one unique maximal candidate, it is chosen; otherwise, there is an
ambiguity error.

@verbatim
int f(path g);
int f(guide g);
f((0,0)--(100,100)); // matches the second; the argument is a guide

int g(int x, real y);
int g(real x, int x);

g(3,4); // ambiguous; the first candidate is better for the first argument,
        // but the second candidate is better for the second argument

int h(... int[] rest);
int h(real x ... int[] rest);

h(1,2); // the second definition matches, even though there is a cast,
        // because casting is preferred over packing

int i(int x ... int[] rest);
int i(real x, real y ... int[] rest);

i(3,4); // ambiguous; the first candidate is better for the first argument,
        // but the second candidate is better for the second one
@end verbatim

@node Mathematical functions
@subsection Mathematical functions
@cindex mathematical functions
@cindex functions
@cindex @code{libm} routines

@cindex @code{sin}
@cindex @code{cos}
@cindex @code{tan}
@cindex @code{asin}
@cindex @code{acos}
@cindex @code{atan}
@cindex @code{exp}
@cindex @code{log}
@cindex @code{pow10}
@cindex @code{log10}
@cindex @code{sinh}
@cindex @code{cosh}
@cindex @code{tanh}
@cindex @code{asinh}
@cindex @code{acosh}
@cindex @code{atanh}
@cindex @code{sqrt}
@cindex @code{cbrt}
@cindex @code{fabs}
@cindex @code{identity}
@cindex @code{J}
@cindex @code{Y}
@cindex @code{gamma}
@cindex @code{erf}
@cindex @code{erfc}
@cindex @code{atan2}
@cindex @code{hypot}
@cindex @code{fmod}
@cindex @code{remainder}
@code{Asymptote} has built-in versions of the standard @code{libm} mathematical
real(real) functions @code{sin}, @code{cos}, @code{tan}, @code{asin},
@code{acos}, @code{atan}, @code{exp}, @code{log}, @code{pow10},
@code{log10}, @code{sinh}, @code{cosh}, @code{tanh}, @code{asinh},
@code{acosh}, @code{atanh}, @code{sqrt}, @code{cbrt}, @code{fabs},
as well as the identity function @code{identity}. 
@code{Asymptote} also defines the order @code{n} Bessel functions of
the first kind @code{J(int n, real)} and second kind
@code{Y(int n, real)}, as well as the gamma function @code{gamma},
the error function @code{erf}, and the complementary error function
@code{erfc}. The standard real(real, real) functions @code{atan2},
@code{hypot}, @code{fmod}, @code{remainder} are also included.

@cindex @code{floor}
@cindex @code{ceil}
@cindex @code{round}
@cindex @code{sgn}
The functions @code{floor}, @code{ceil}, and @code{round} differ from
their usual definitions in that they all return an int value rather than
a real (since that is normally what one wants).
The functions @code{Floor}, @code{Ceil}, and @code{Round} are
respectively similar, except that if the result cannot be converted
to a valid int, they return @code{intMax()} 
for positive arguments and @code{-intMax()} for negative arguments,
rather than generating an integer overflow.
We also define a function @code{sgn}, which returns the sign of its
real argument as an integer (-1, 0, or 1).

@cindex @code{abs}
There is an @code{abs(int)} function, as well as an @code{abs(real)} function
(equivalent to @code{fabs(real)}) and an @code{abs(pair)} function
(equivalent to @code{length(pair)}).

@cindex @code{rand}
@cindex @code{srand}
@cindex @code{randMax}
@cindex @code{Gaussrand}
@cindex @code{histogram}
Random numbers can be seeded with @code{srand(int)} and generated with
the @code{int rand()} function, which returns a random integer between 0
and the integer @code{randMax()}. A Gaussian random number generator
@code{Gaussrand} and a collection of statistics routines, including
@code{histogram}, are provided in the base file @code{stats.asy}.


@node Arrays
@section Arrays
@cindex arrays

Appending @code{[]} to a built-in or user-defined type yields an array.
By default, attempts to access or assign to an array element using a negative
index generates an error. While reading an array element with an index
beyond the length of the array also generates an error, assignment to such an
element causes the array to be resized to accommodate the new element.
One can also index an array @code{A} with an integer array @code{B},
to obtain the array formed by indexing array @code{A} with successive
elements of array @code{B}.

The declaration
@verbatim
real[] A;
@end verbatim

@noindent
initializes @code{A} to be an empty (zero-length) array. Empty arrays should be
distinguished from null arrays. If we say
@verbatim
real[] A=null;
@end verbatim

@noindent
then @code{A} cannot be dereferenced at all (null arrays have no length
and cannot be read from or assigned to).

Arrays can be explicitly initialized like this:
@verbatim
real[] A={0,1,2};
@end verbatim

Array assignment in @code{Asymptote} does a shallow copy: only
the pointer is copied (if one copy if modified, the other will be too). 
The @code{copy} function listed below provides a deep copy of an array.

@cindex @code{length}
@cindex @code{cyclic}
@cindex @code{cyclicflag}
@cindex @code{push}
@cindex @code{pop}
@cindex @code{append}
Every array @code{A} of type @code{T[]} has the virtual members
@code{int length}, @code{void cyclic(bool)}, @code{bool cyclicflag},
@code{T push(T)}, @code{void append(T[])}, and @code{T pop()}.
The member @code{A.length} evaluates to the length of the array.
Setting @code{A.cyclic(true)} signifies that array indices should be reduced
modulo the current array length. Reading from or writing to a nonempty
cyclic array never leads to out-of-bounds errors or array resizing. The member
@code{A.cyclicflag} returns the current setting of the @code{cyclic} flag.
The functions @code{A.push} and @code{A.append} append their
arguments onto the end of the array (for convenience @code{A.push}
also returns its argument), while @code{A.pop()} pops and
returns the last element. Like all @code{Asymptote} functions, 
@code{cyclic}, @code{push}, @code{pop}, and @code{append} can be
"pulled off" of the array and used on their own. For example,
@verbatim
int[] A={1};
A.push(2);         // A now contains {1,2}.
A.append(A);       // A now contains {1,2,1,2}.
int f(int)=A.push;
f(3);              // A now contains {1,2,1,2,3}.
int g()=A.pop;
write(g());        // Outputs 3.
@end verbatim

The @code{[]} suffix can also appear after the variable name; this
is sometimes convenient for declaring a list of variables and arrays
of the same type:
@verbatim
real a,A[];
@end verbatim
This declares @code{a} to be @code{real} and implicitly declares @code{A} to
be of type @code{real[]}. But beware that this alternative syntax does
not construct certain internal type-dependent functions that take
@code{real[]} as an argument: @code{alias}, @code{copy}, @code{concat},
@code{sequence}, @code{map}, and @code{transpose} for type
@code{real[]} won't be defined until the type @code{real[]} is used
explicitly somewhere.

In the following list of built-in array functions, @code{T} represents a
generic type.

@table @code

@cindex @code{new}
@item new T[]
returns a new empty array of type @code{T[]};

@cindex @code{new}
@item new T[] @{list@}
returns a new array of type @code{T[]} initialized with @code{list} (a comma
delimited list of elements).

@item new T[n]
returns a new array of @code{n} elements of type @code{T[]}. 
Unless they are arrays themselves, these @code{n} array elements are
not initialized.

@cindex @code{sequence}
@item int[] sequence(int n)
if @code{n >= 1} returns the array @code{@{0,1,...,n-1@}} (otherwise returns
a null array);

@item int[] sequence(int n, int m)
if @code{m >= n} returns an array @code{@{n,n+1,...,m@}} (otherwise
returns a null array);

@item T[] sequence(T f(int),n)
if @code{n >= 1} returns the sequence @code{@{f_i :i=0,1,...n-1@}} given a
function @code{T f(int)} and integer @code{int n} (otherwise returns a
null array);

@cindex @code{reverse}
@item int[] reverse(int n)
if @code{n >= 1} returns the array @code{@{n-1,n-2,...,0@}} (otherwise
returns a null array);

@cindex @code{find}
@item int find(bool[], int n=1)
returns the index of the @code{n}th @code{true} value or -1 if not found.
If @code{n} is negative, search backwards from the end of the array for the
@code{-n}th value; 

@cindex @code{search}
@item int search(T[], T key)
For ordered types @code{T}, searches a sorted ordered array of
@code{n} elements to find an interval containing @code{key}, returning
@code{-1} if @code{key} is less than the first element, @code{n-1} if
@code{key} is greater than or equal to the last element, and otherwise
the index corresponding to the left-hand (smaller) endpoint.

@cindex @code{copy}
@item T[] copy(T[] A)
returns a deep copy of the array @code{A};

@cindex @code{concat}
@item T[] concat(T[] A, T[] B)
returns a new array formed by concatenating arrays @code{A} and @code{B};

@cindex @code{alias}
@item bool alias(T[] A, T[] B)
returns @code{true} if the arrays @code{A} and @code{B} are identical;

@cindex @code{sort}
@item T[] sort(T[] A)
For ordered types @code{T}, returns a copy of @code{A} sorted in
ascending order;

@item T[][] sort(T[][] A)
For ordered types @code{T}, returns a copy of @code{A} with the rows
sorted by the first column, breaking ties with successively higher
columns. For example:
@verbatim
string[][] a={{"bob","9"},{"alice","5"},{"pete","7"},
              {"alice","4"}};
write("Row sort (by column 0, using column 1 to break ties):");
write(stdout,sort(a));
@end verbatim

produces
@verbatim
alice   4
alice   5
bob     9
pete    7
@end verbatim

@cindex @code{transpose}
@item T[][] transpose(T[][] A)
returns the transpose of @code{A}.

@cindex @code{sum}
@item T sum(T[] A)
For arithmetic types @code{T}, returns the sum of @code{A}.

@cindex @code{min}
@item T min(T[] A)
For ordered types @code{T}, returns the minimum element of @code{A}.

@cindex @code{max}
@item T max(T[] A)
For ordered types @code{T}, returns the maximum element of @code{A}.

@cindex @code{map}
@item map(f(T), T[] A)
returns the array obtained by applying the function @code{f} to each
element of the array @code{A}.

@cindex @code{min}
@item T[] min(T[] A, T[] B)
For ordered types @code{T}, and arrays @code{A} and @code{B} of the same
length, returns an array composed of the minimum of the corresponding
elements of @code{A} and @code{B}.

@cindex @code{max}
@item T[] max(T[] A, T[] B)
For ordered types @code{T}, and arrays @code{A} and @code{B} of the same
length, returns an array composed of the maximum of the corresponding elements
of @code{A} and @code{B}.

@cindex @code{fft}
@item pair[] fft(pair[] A, int sign)
returns the Fast Fourier Transform of @code{A} (if the optional
@code{FFTW} package is installed), using the given @code{sign}. Here
is a simple example:
@verbatim
int n=4;
pair[] f=sequence(n);
write(f);
pair[] g=fft(f,-1);
write();
write(g);
f=fft(g,1);
write();
write(f/n);
@end verbatim

@anchor{tridiagonal}
@cindex @code{tridiagonal}
@item real[] tridiagonal(real[] a, real[] b, real[] c, real[] f);
Solve the periodic tridiagonal problem @math{L^{-1}} @code{f}, where @code{f}
is an @math{n} vector and @math{L} is the @math{n \times n} matrix
@verbatim
[ b[0] c[0]           a[0]   ]
[ a[1] b[1] c[1]             ]
[      a[2] b[2] c[2]        ]
[                ...         ]
[       c[n-1] a[n-1] b[n-1] ]
@end verbatim
For Dirichlet boundary conditions (denoted here by @code{u[-1]} and
@code{u[n]}), replace @code{f[0]} by @code{f[0]-a[0]u[-1]} and
@code{f[n-1]-c[n-1]u[n]}; then set @code{a[0]=c[n-1]=0}. 

@cindex @code{quadraticroots}
@item @code{real[] quadraticroots(real a, real b, real c);}
This numerically robust solver returns the real roots of the
quadratic equation @code{ax^2+bx+c=0}.

@cindex @code{cubicroots}
@item @code{real[] cubicroots(real a, real b, real c, real d);}
This numerically robust solver returns the real roots of the
cubic equation @code{ax^3+bx^2+cx+d=0}.

@end table

@code{Asymptote} includes a full set of vectorized array instructions for
arithmetic (including self) and logical operations. These
element-by-element instructions are implemented in C++ code for speed. Given
@verbatim
real[] a={1,2};
real[] b={3,2};
@end verbatim
@noindent
then @code{a == b} and @code{a >= 2} both evaluate to the vector
@code{@{false, true@}}. 
To test whether all components of @code{a} and @code{b} agree,
use the boolean function @code{all(a == b)}. One can also use conditionals like
@code{(a >= 2) ? a : b}, which returns the array @code{@{3,2@}}, or
@code{write((a >= 2) ? a : null}, which returns the array @code{@{2@}}.

All of the standard built-in @code{libm} functions of signature
@code{real(real)} also take a real array as an argument, effectively like an
implicit call to @code{map}.

As with other built-in types, arrays of the basic data types can be read
in by assignment. In this example, the code
@verbatim
file fin=input("test.txt");
real[] A=fin;
@end verbatim

@cindex @code{eof}
@cindex @code{eol}
@cindex @code{line}
@cindex line mode
@noindent
reads real values into @code{A} until the end of file is reached (or an
I/O error occurs). If line mode is set with @code{line(file)}, then
reading will stop once the end of the line is reached instead
(line mode may be cleared with @code{line(file,false)}):
@verbatim
file fin=input("test.txt");
real[] A=line(fin);
@end verbatim

@cindex csv
@cindex comma-separated-value
Another useful mode is comma-separated-value mode, set with @code{csv(file)}
and cleared with @code{csv(file,false)}, which skips over any comma delimiters:
@verbatim
file fin=input("test.txt");
real[] A=csv(fin);
@end verbatim

@cindex @code{dimension}
To restrict the number of values read, use the @code{dimension(file,int)}
function: 
@verbatim
file fin=input("test.txt");
real[] A=dimension(fin,10);
@end verbatim

This reads 10 values into A, unless end-of-file (or end-of-line in line mode)
occurs first. Attempting to read beyond the end of the file will produce a
runtime error message. Specifying a value of 0 for the integer limit is
equivalent to the previous example of reading until end-of-file (or
end-of-line in line mode) is encountered.

Two- and three-dimensional arrays of the basic data types can be read
in like this:
@verbatim
file fin=input("test.txt");
real[][] A=dimension(fin,2,3);
real[][][] B=dimension(fin,2,3,4);
@end verbatim
@noindent
Again, an integer limit of zero means no restriction.

@cindex @code{read1}
@cindex @code{read2}
@cindex @code{read3}
Sometimes the array dimensions are stored with the data as integer
fields at the beginning of an array. Such arrays can be read in with the
functions @code{read1}, @code{read2}, and @code{read3}, respectively:
@verbatim
file fin=input("test.txt");
real[] A=read1(fin);
real[][] B=read2(fin);
real[][][] C=read3(fin);
@end verbatim

@cindex @code{write}
@cindex @code{scroll}
@anchor{scroll}
One, two, and three-dimensional arrays of the basic data types can be
output with the functions @code{write(file,T[])},
@code{write(file,T[][])}, @code{write(file,T[][][])}, respectively.
The command @code{scroll(int n)} is useful for pausing the output
after every @math{n} output lines (press @code{Enter} to continue).

@node Casts
@section Casts
@cindex casts
@cindex implicit casts
@cindex @code{explicit}
 
@code{Asymptote} implicitly casts @code{int} to @code{real}, @code{int} to
@code{pair}, @code{real} to @code{pair}, @code{pair} to @code{path},
@code{pair} to @code{guide}, @code{path} to @code{guide}, @code{guide}
to @code{path}, and @code{real} to @code{pen}. Implicit casts are
also automatically attempted when trying to match function calls with
possible function signatures. Implicit casting can be inhibited
by declaring individual arguments @code{explicit} in the function
signature, say to avoid an ambiguous function call in the following
example, which outputs 0:

@verbatim
int f(pair a) {return 0;}
int f(explicit real x) {return 1;}

write(f(0));
@end verbatim

@cindex explicit casts
Other conversions, say @code{real} to @code{int} or 
@code{real} to @code{string}, require an explicit cast:
@verbatim
int i=(int) 2.5;
string s=(string) 2.5;

real[] a={2.5,-3.5};
int[] b=(int []) a;
write(stdout,b);     // Outputs 2,-3
@end verbatim

@cindex operator cast
Casting to user-defined types is also possible using @code{operator cast}:
@verbatim
struct rpair {
  public real radius;
  public real angle;
}

rpair operator init() {return new rpair;}

pair operator cast(rpair x) {
  return (x.radius*cos(x.angle),x.radius*sin(x.angle));
}

rpair x;
x.radius=1;
x.angle=pi/6;

write(x);            // Outputs (0.866025403784439,0.5)
@end verbatim

One must use care when defining new cast operators. Suppose that in some
code one wants all integers to represent multiples of 100. To convert them
to reals, one would first want to multiply them by 100. However, the
straightforward implementation
@verbatim
real operator cast(int x) {return x*100;}
@end verbatim
is equivalent to an infinite recursion, since the result @code{x*100}
needs itself to be cast from an integer to a real. Instead, we want to
use the standard conversion of int to real:
@verbatim
real convert(int x) {return x*100;}
real operator cast(int x)=convert;
@end verbatim

@cindex operator ecast
Explicit casts are implemented similarly, with @code{operator ecast}.

@node Import
@section Import
@cindex @code{access}
While @code{Asymptote} provides many features by default,
some applications require specialized features contained in
external @code{Asymptote} modules. For instance, the lines
@verbatim
access graph;
graph.axes();
@end verbatim
@noindent
draw @math{x} and @math{y} axes on a two-dimensional graph.  Here, the
command looks up the module under the name @code{graph} in a global dictionary
of modules and puts it in a new variable named @code{graph}.
The module is a structure, and we can refer to its fields as we usually
would with a structure.

@cindex @code{from}
Often, one wants to use module functions without having to specify
the module name.  The code 
@verbatim
from graph access axes;
@end verbatim
@noindent
adds the @code{axes} field of @code{graph} into the local name space,
so that subsequently, one can just write @code{axes()}.  If the given name
is overloaded, all types and variables of that name are added.  To add
more than one name, just use a comma-separated list:

@verbatim
from graph access axes, xaxis, yaxis;
@end verbatim
@noindent
Wild card notation can be used to add all non-private fields and types of a
module to the local name space:

@verbatim
from graph access *;
@end verbatim

@cindex @code{unravel}
Similarly, one can add the non-private fields and types of a structure
to the local environment with the @code{unravel} keyword:

@verbatim
struct matrix { 
  real a,b,c,d; 
} 
 
real det(matrix m) { 
  unravel m; 
  return a*d-b*c; 
} 
@end verbatim
Alternatively, one can unravel selective fields:
@verbatim
real det(matrix m) { 
  from m unravel a,b,c as C,d;
  return a*d-b*C; 
} 
@end verbatim

@cindex @code{import}
The command
@verbatim
import graph;
@end verbatim
is a convenient abbreviation for the commands
@verbatim
access graph;
unravel graph;
@end verbatim
That is, @code{import graph} first loads a module into a structure called
@code{graph} and then adds its non-private fields and types to the
local environment. This way, if a member variable (or function) is
overwritten with a local variable (or function of the same signature),
the original one can still be accessed by qualifying it with the
module name.

Wild card importing will work fine in most cases, but one does not usually know
all of the internal types and variables of a module, which can also
change as the module writer adds or changes features of the module.
As such, it is prudent to add @code{import} commands at the start of an
@code{Asymptote} file, so that imported names won't shadow locally
defined functions.  Still, imported names may shadow other imported
names, depending on the order in which they were imported, and
imported functions may cause overloading resolution problems if they
have the same name as local functions defined later.

@cindex @code{as}
To rename modules or fields when adding them to the local environment, use
@code{as}:

@verbatim
access graph as graph2d;
from graph access xaxis as xline, yaxis as yline;
@end verbatim

The command
@verbatim
import graph as graph2d;
@end verbatim
is a convenient abbreviation for the commands
@verbatim
access graph as graph2d;
unravel graph2d;
@end verbatim

Currently, all modules are implemented as @code{Asymptote} files.
When looking up a module that has not yet been loaded,
@code{Asymptote} searches the standard search paths (@pxref{Search
paths}) for the matching file.  The file corresponding to that name is
read and the code within it is interpreted as the body of a structure
defining the module.

If the file name contains
nonalphanumeric characters, enclose it with quotation marks:

@noindent
@code{access "@value{Datadir}/asymptote/graph.asy" as graph;}

@noindent
@code{from "@value{Datadir}/asymptote/graph.asy" access axes;}

@noindent
@code{import "@value{Datadir}/asymptote/graph.asy" as graph;}

It is an error if modules import themselves (or each other in a cycle).

The module name to be imported must be known at compile time.
However, you can execute an @code{Asymptote} file determined at runtime in
a new @code{Asymptote} environment with the function
@cindex @code{execute}
@verbatim
void execute(string s, bool embedded=false);
@end verbatim
One can evaluate an @code{Asymptote} expression (without any return
value, however) contained in the string @code{s} with:
@cindex @code{eval}
@verbatim
void eval(string s, bool embedded=false);
@end verbatim
If @code{embedded} is @code{true}, the string @code{s} will be evaluated 
at the top level of the current environment instead of in an independent
environment.

One can evaluate arbitrary @code{Asymptote} code (which may
contain unescaped quotation marks) with the command
@verbatim
void eval(code s, bool embedded=false);
@end verbatim
Here @code{code} is a special type used with @code{quote @{@}}
to enclose @code{Asymptote code} like this:
@verbatim
real a=1;
code s=quote {
  write(a);
};
eval(s,true);        // Outputs 1
@end verbatim

To include the contents of a file @code{graph} verbatim (as if the
contents of the file were inserted at that point), use one of the forms:
@verbatim
include graph;
@end verbatim

@noindent
@code{include "@value{Datadir}/asymptote/graph.asy";}



@code{Asymptote} currently ships with the following base modules:

@menu
* plain::                       Default @code{Asymptote} base file
* simplex::                     Linear programming: simplex method
* graph::                       2D linear & logarithmic graphs
* three::                       Three-dimensional vector graphics
* graph3::                      3D linear & logarithmic graphs
* featpost3D::                  Preliminary port of @code{featpost3d}
* math::                        Extend @code{Asymptote}'s math capabilities
* geometry::                    Geometry routines
* stats::                       Statistics routines and histograms
* patterns::                    Custom fill and draw patterns
* palette::                     Color density images and palettes
* tree::                        Dynamic binary search tree
* drawtree::                    Tree drawing module
* feynman::                     Feynman diagrams
* MetaPost::                    @code{MetaPost} compatibility routines
* unicode::                     Accept @code{unicode} (UTF-8) characters
* latin1::                      Accept @code{ISO 8859-1} characters
* babel::                       Implement @code{LaTeX} @code{babel} package
@end menu

@node plain
@subsection @code{plain}
@cindex @code{plain}

This is the default @code{Asymptote} base file, which defines key parts of the
drawing language (such as the @code{picture} structure).

By default, an implicit @code{private import plain;} occurs before
translating a file and before the first command given in interactive
mode.  This also applies when translating files for module definitions
(except when translating @code{plain}, of course).  This means that
the types and functions defined in @code{plain} are accessible in
almost all @code{Asymptote} code. Use the @code{-noplain} command-line
option to disable this feature.

@node simplex
@subsection @code{simplex}
@cindex @code{simplex}

This package solves the two-variable linear programming problem using the
simplex method. It is used by @code{plain} for automatic sizing of pictures.

@node graph
@subsection @code{graph}
@cindex @code{graph}
@cindex 2D graphs
This package implements two-dimensional linear and logarithmic graphs,
including automatic scale and tick selection (with the ability to
override manually). A graph is a @code{guide} (that can be drawn with
the draw command, with an optional legend) constructed with one of
the following routines: 

@itemize
@item
@verbatim
guide graph(picture pic=currentpicture, real f(real), real a, real b,
            int n=ngraph, interpolate join=operator --);
@end verbatim

Returns a graph using the scaling information for picture @code{pic}
(@pxref{automatic scaling}) of the function @code{f} on the interval
[@code{a},@code{b}], sampling at @code{n} evenly spaced points, with
one of these interpolation types:
@itemize @bullet 

@cindex @code{operator --}
@cindex @code{Straight}
@item @code{operator --} (linear interpolation; the abbreviation
@code{Straight} is also accepted) 

@cindex @code{operator ..}
@cindex @code{Spline} 
@item @code{operator ..} (piecewise Bezier cubic spline interpolation;
the abbreviation @code{Spline} is also accepted)

@end itemize

@item
@verbatim
guide graph(picture pic=currentpicture, real x(real), real y(real),
            real a, real b, int n=ngraph,
            interpolate join=operator --);
@end verbatim

Returns a graph using the scaling information for picture @code{pic}
of the parametrized function
(@code{x}(@math{t}),@code{y}(@math{t})) for @math{t} in
[@code{a},@code{b}], sampling at @code{n} evenly spaced points, with
the given interpolation type.

@item
@verbatim
guide graph(picture pic=currentpicture, pair z(real), real a, real b,
            int n=ngraph, interpolate join=operator --);
@end verbatim

Returns a graph using the scaling information for picture @code{pic}
of the parametrized function
@code{z}(@math{t}) for @math{t} in [@code{a},@code{b}], sampling at
@code{n} evenly spaced points, with the given interpolation type.

@item
@verbatim
guide graph(picture pic=currentpicture, pair[] z, bool[] cond={},
            interpolate join=operator --);
@end verbatim

Returns a graph using the scaling information for picture @code{pic}
of those elements of the array
@code{z} for which the corresponding elements of the boolean array
@code{cond} are @code{true}, with the given interpolation type.

@item
@verbatim
guide graph(picture pic=currentpicture, real[] x, real[] y,
            bool[] cond={}, interpolate join=operator --);
@end verbatim

Returns a graph using the scaling information for picture @code{pic}
of those elements of the arrays
(@code{x},@code{y}) for which the corresponding elements of the boolean array
@code{cond} are @code{true}, with the given interpolation type.

@item
@verbatim
guide graph(real f(real), real a, real b, int n=ngraph, real T(real),
           interpolate join=operator --);
@end verbatim

Returns a graph using the scaling information for picture @code{pic}
of the function @code{f} on the interval
[@code{T}(@code{a}),@code{T}(@code{b})], sampling at @code{n} points evenly
spaced in [@code{a},@code{b}], with the given interpolation type.

@item
@verbatim
guide polargraph(real f(real), real a, real b, int n=ngraph,
                 interpolate join=operator --);
@end verbatim

Returns a polar-coordinate graph using the scaling information for
picture @code{pic} of the function @code{f} on the interval 
[@code{a},@code{b}], sampling at @code{n} evenly spaced points, with
the given interpolation type.

@end itemize

@verbatim


@end verbatim

An axis can be drawn on a picture with one of the following commands:

@itemize

@item
@verbatim
void xaxis(picture pic=currentpicture, Label L="", axis axis=YZero,
           real xmin=-infinity, real xmax=infinity, pen p=currentpen, 
           ticks ticks=NoTicks, arrowbar arrow=None, bool put=Below);
@end verbatim

Draw an @math{x} axis on picture @code{pic} from @math{x}=@code{xmin} to
@math{x}=@code{xmax} using pen @code{p}, optionally labelling it with
Label @code{L}. The relative label location along the axis (a real number from
[0,1]) defaults to 1 (@pxref{Label}), so that the label is drawn at the
end of the axis. An infinite value of @code{xmin}
or @code{xmax} specifies that the corresponding axis limit will be
automatically determined from the picture limits. 
The optional @code{arrow} argument takes the same values as in the
@code{draw} command (@pxref{arrows}). If @code{put}=@code{Below} and
the @code{extend} flag for @code{axis} is @code{false}, the axis is
drawn before any existing objects in the current picture.
The axis placement is determined by one of the following @code{axis} types:

@table @code

@cindex @code{YZero}
@item YZero(bool extend=true)
Request an @math{x} axis at @math{y}=0 (or @math{y}=1 on a logarithmic axis)
extending to the full dimensions of the picture, unless @code{extend}=false.

@cindex @code{YEquals}
@item YEquals(real Y, bool extend=true)
Request an @math{x} axis at @math{y}=@code{Y} extending to the full
dimensions of the picture, unless @code{extend}=false.

@cindex @code{Bottom}
@item Bottom(bool extend=false)
Request a bottom axis.

@cindex @code{Top}
@item Top(bool extend=false)
Request a top axis.

@cindex @code{BottomTop}
@item BottomTop(bool extend=false)
Request a bottom and top axis.

@end table

@cindex custom axis types
Custom axis types can be created by following the examples in @code{graph.asy}.
One can easily override the default values for the standard axis types:
@verbatim
import graph;

YZero=new axis(bool extend=true) {
  return new void(picture pic, axisT axis) {
    real y=pic.scale.x.scale.logarithmic ? 1 : 0;
    axis.value=I*pic.scale.y.T(y);
    axis.position=1;
    axis.side=right;
    axis.align=2.5E;
    axis.value2=Infinity;
    axis.extend=extend;
  };
};
YZero=YZero();

@end verbatim

@anchor{ticks}
@cindex @code{ticks}
@cindex @code{NoTicks}
The default tick option is @code{NoTicks}. 
The option @code{LeftTicks} (@code{RightTicks}) can be used to draw
ticks on the left (right) of the path, relative to the direction in which
the path is drawn. These tick routines accept a number of optional arguments:
@verbatim
ticks LeftTicks(Label format="", ticklabel ticklabel=null,
                bool beginlabel=true, bool endlabel=true,
                int N=0, int n=0, real Step=0, real step=0,
                bool begin=true, bool end=true,
                real Size=0, real size=0, bool extend=false,
                pen pTick=nullpen, pen ptick=nullpen);
@end verbatim

If any of these parameters are omitted, reasonable defaults will
be chosen:
@table @code
@item Label format
override the default tick label format (@code{defaultformat}, initially
"$%.4g$"), rotation, pen, and alignment (for example, @code{LeftSide},
@code{Center}, or @code{RightSide}) relative to the axis. To enable
@code{LaTeX} math mode fonts, the format string should begin and
end with @code{$} @pxref{format}; if the format string is @code{"%"},
the tick label will be suppressed;
@item ticklabel
is a function @code{string(real x)} returning the label (by default,
format(format.s,x)) for each tick value @code{x};
@item bool beginlabel
include the first label;
@item bool endlabel
include the last label;
@item int N
when automatic scaling is enabled (the default; @pxref{automatic scaling}),
divide the values evenly into this many intervals, separated by big ticks;
@item int n
divide each value interval into this many subintervals, separated by
small ticks;
@item real Step
the tick value spacing between big ticks
(if @code{N}=@code{0});
@item real step
the tick value spacing between small
ticks (if @code{n}=@code{0});
@item bool begin
include the first big tick;
@item bool end
include the last big tick;
@item real Size
the size of the big ticks (in @code{PostScript} coordinates);
@item real size
the size of the small ticks (in @code{PostScript} coordinates);
@item bool extend;
extend the big ticks across the graph (useful for drawing a grid on
the graph);
@item pen pTick
an optional pen used to draw the big ticks;
@item pen ptick
an optional pen used to draw the small ticks.

@end table

@cindex custom tick locations
It is also possible to specify custom tick locations with
@code{LeftTicks} and @code{RightTicks} by passing explicit real
arrays @code{Ticks} and (optionally) @code{ticks} containing the
locations of the big and small ticks, respectively:
@verbatim
ticks LeftTicks(Label format="", ticklabel ticklabel=null, 
                bool beginlabel=true, bool endlabel=true, 
                real[] Ticks, real[] ticks=new real[],
                real Size=0, real size=0, bool extend=false,
                pen pTick=nullpen, pen ptick=nullpen)
@end verbatim

@item
@verbatim
void yaxis(picture pic=currentpicture, Label L="", axis axis=XZero,
           real ymin=-infinity, real ymax=infinity, pen p=currentpen,
           ticks ticks=NoTicks, arrowbar arrow=None, bool put=Below);
@end verbatim

Draw a @math{y} axis on picture @code{pic} from @math{y}=@code{ymin} to
@math{y}=@code{ymax} using pen @code{p}, optionally labelling it with
Label @code{L}. The relative location of the label (a real number from
[0,1]) defaults to 1 (@pxref{Label}). An infinite value of @code{ymin}
or @code{ymax} specifies that the corresponding axis limit will be
automatically determined from the picture limits. 
The optional @code{arrow} argument takes the same values as in the
@code{draw} command (@pxref{arrows}). If @code{put}=@code{Below} and
the @code{extend} flag for @code{axis} is @code{false}, the axis is
drawn before any existing objects in the current picture.
The tick type is specified by @code{ticks} and the axis placement is
determined by one of the following @code{axis} types:

@table @code

@cindex @code{XZero}
@item XZero(bool extend=true)
Request a @math{y} axis at @math{x}=0 (or @math{x}=1 on a logarithmic axis)
extending to the full dimensions of the picture, unless @code{extend}=false.

@cindex @code{XEquals}
@item XEquals(real X, bool extend=true)
Request a @math{y} axis at @math{x}=@code{X} extending to the full
dimensions of the picture, unless @code{extend}=false.

@cindex @code{Left}
@item Left(bool extend=false)
Request a left axis.

@cindex @code{Right}
@item Right(bool extend=false) 
Request a right axis.

@cindex @code{LeftRight}
@item LeftRight(bool extend=false) 
Request a left and right axis.

@end table

@item

@cindex @code{xequals}
@cindex @code{yequals}
For convenience, the functions 
@verbatim
void xequals(picture pic=currentpicture, Label L="", real x,
             bool extend=false, real ymin=-infinity, real ymax=infinity,
             pen p=currentpen, ticks ticks=NoTicks, bool put=Above,
             arrowbar arrow=None);
@end verbatim
and
@verbatim
void yequals(picture pic=currentpicture, Label L="", real y,
             bool extend=false, real xmin=-infinity, real xmax=infinity,
             pen p=currentpen, ticks ticks=NoTicks, bool put=Above,
             arrowbar arrow=None);
@end verbatim
can be respectively used to call @code{yaxis} and
@code{xaxis} with the appropriate axis types @code{XEquals(x,extend)} and
@code{YEquals(y,extend)}. This is the recommended way of drawing vertical
or horizontal lines and axes at arbitrary locations. 

@item
@verbatim
void axis(picture pic=currentpicture, Label L="", guide g,
          pen p=currentpen, ticks ticks, ticklocate locate,
          arrowbar arrow=None, int[] divisor=new int[],
          bool put=Above, bool opposite=false);
@end verbatim

This routine can be used to draw on picture @code{pic} a general axis
based on an arbitrary path @code{g}, using pen @code{p}. 
One can optionally label the axis with Label @code{L} and add an arrow
@code{arrow}. The tick type is given by @code{ticks}. 
The optional integer array @code{divisor} specifies what tick divisors
to try in the attempt to produce uncrowded tick labels. A @code{true}
value for the flag @code{opposite} identifies an unlabelled secondary
axis (typically drawn opposite a primary axis).  The axis is drawn
on top of any existing objects in the current picture only if @code{put}
is @code{Above}. The tick locater @code{ticklocate} is
constructed by the routine
@verbatim
ticklocate ticklocate(real a, real b, autoscaleT S=defaultS,
                      real tickmin=-infinity, real tickmax=infinity,
                      real time(real)=null, pair dir(real)=zero);
@end verbatim
@noindent
where @code{a} and @code{b} specify the respective tick values at
@code{point(g,0)} and @code{point(g,length(g))}, @code{S} specifies
the autoscaling transformation, the function @code{real time(real v)}
returns the time corresponding to the value @code{v}, and
@code{pair dir(real t)} returns the absolute tick direction as a
function of @code{t} (zero means draw the tick perpendicular to the axis).

@item These routines are useful for manually putting ticks and labels on axes
(if the special variable @code{Label} is given as the @code{Label}
argument, the @code{format} argument will be used to format a string based on
the tick location):
@cindex xtick
@cindex ytick
@cindex labelx
@cindex labely
@cindex tick
@cindex Label
@verbatim
void xtick(picture pic=currentpicture, Label L="", pair z,
           pair dir=N, string format="",
           real size=Ticksize, pen p=currentpen);
void ytick(picture pic=currentpicture, Label L="", explicit pair z,
           pair dir=E, string format="",
           real size=Ticksize, pen p=currentpen);
void ytick(picture pic=currentpicture, Label L="", real y,
           pair dir=E, string format="",
           real size=Ticksize, pen p=currentpen);
void tick(picture pic=currentpicture, pair z,
          pair dir, real size=Ticksize, pen p=currentpen);
void labelx(picture pic=currentpicture, Label L="", pair z,
            align align=S, string format="", pen p=nullpen);
void labelx(picture pic=currentpicture, Label L,
            string format="", explicit pen p=currentpen);
void labely(picture pic=currentpicture, Label L="", explicit pair z,
            align align=W, string format="", pen p=nullpen);
void labely(picture pic=currentpicture, Label L="", real y,
            align align=W, string format="", pen p=nullpen);
void labely(picture pic=currentpicture, Label L,
            string format="", explicit pen p=nullpen);
@end verbatim
@end itemize

Here are some simple examples of two-dimensional graphs:

@enumerate

@cindex textbook graph
@item This example draws a textbook-style graph of
@math{y=} exp@math{(x)}, with the @math{y} axis starting at @math{y=0}:
@verbatiminclude exp.asy
@image{exp}


@item The next example draws a scientific-style graph with a legend.
The position of the legend can be adjusted either explicitly or by using the
graphical user interface @code{xasy} (@pxref{GUI}). If an
@code{UnFill(real xmargin=0, real ymargin=xmargin)} or
@code{Fill(pen)} option is specified to @code{add}, the legend will obscure
any underlying objects. Here we illustrate how to clip the portion of
the picture covered by a label:

@cindex scientific graph
@cindex @code{LeftTicks}
@cindex @code{RightTicks}
@verbatiminclude lineargraph0.asy
@image{lineargraph0}

@cindex @code{attach}
To specify a fixed size for the graph proper, use @code{attach}.
@verbatiminclude lineargraph.asy

@item This example draws a graph of one array versus another (both of
the same size) using custom tick locations and a smaller font size for
the tick labels on the @math{y} axis.
@verbatiminclude datagraph.asy
@image{datagraph}

@cindex @code{polygon}
@cindex @code{cross}
@cindex @code{errorbars}
@cindex @code{marker}
@cindex @code{marknodes}
@cindex @code{markuniform}
@anchor{markers}
@item The next example draws two graphs of an array of coordinate pairs,
using frame alignment and data markers. In the left-hand graph, the
markers, constructed with
@verbatim
marker marker(path g, markroutine markroutine=marknodes, 
              pen p=currentpen, filltype filltype=NoFill,
              bool put=Above);
@end verbatim
using the path @code{unitcircle} (@pxref{filltype}), are drawn
below each node. Any frame can be converted to a marker, using
@verbatim
marker marker(frame f, markroutine markroutine=marknodes,
              bool put=Above);
@end verbatim
In the right-hand graph, the unit @math{n}-sided regular polygon 
@code{polygon(int n)} and the unit @math{n}-point cross 
@code{cross(int n)} are used to build a custom marker frame. 
Here @code{markuniform(int n)} adds this frame at @code{n}
uniformly spaced points along the arclength of the path. This example also
illustrates the @code{errorbar} routines:

@verbatim
void errorbars(picture pic=currentpicture, pair[] z, pair[] dp,
               pair[] dm={}, bool[] cond={}, pen p=currentpen,
               real size=0);

void errorbars(picture pic=currentpicture, real[] x, real[] y,
               real[] dpx, real[] dpy, real[] dmx={}, real[] dmy={},
               bool[] cond={}, pen p=currentpen, real size=0);
@end verbatim

@noindent
Here, the positive and negative extents of the error are given by the
absolute values of the elements of the pair array @code{dp} and the
optional pair array @code{dm}. If @code{dm} is not specified, the
positive and negative extents of the error are assumed to be equal.
@anchor{errorbars}
@verbatiminclude errorbars.asy
@image{errorbars}

@item This example draws a graph of a parametrized curve. 
@cindex parametrized curve
@cindex cropping graphs
@cindex @code{limits}
@cindex @code{xlimits}
@cindex @code{ylimits}
@cindex @code{crop}

The calls to 
@verbatim
xlimits(picture pic=currentpicture, real min=-infinity,
        real max=infinity, bool crop=Crop);
@end verbatim 

and the analogous function @code{ylimits} can be uncommented
to restrict the respective axes limits for picture @code{pic} to the
specified @code{min} and @code{max} values (alternatively, the function
@code{limits(pair, pair)} can be used to limit the axes to the
box having opposite vertices at the given pairs).
Existing objects in picture @code{pic} will be cropped to lie
within the given limits unless @code{crop}=@code{NoCrop}. For example, if
@code{xlimits} or @code{ylimits} are called with no arguments,
existing objects in @code{currentpicture} will be cropped to the current
graph limits. The function @code{crop(picture pic)} is equivalent
to calling both @code{xlimits()} and @code{ylimits()}.
@verbatiminclude parametricgraph.asy
@image{parametricgraph}

@anchor{automatic scaling}
@cindex @code{scale}
@cindex @code{Linear}
@cindex @code{Log}
@cindex automatic scaling
Axis scaling can be requested and/or automatic selection of the
axis limits can be inhibited with the @code{scale} routine:
@verbatim
void scale(picture pic=currentpicture, scaleT x, scaleT y);
@end verbatim

This sets the scalings for picture @code{pic}. The @code{graph} routines
accept an optional @code{picture} argument for determining the appropriate
scalings to use; if none is given, it uses those set for @code{currentpicture}.
All path coordinates (and any call to @code{limits}, etc.)
refer to scaled data. Two frequently used scaling routines
@code{Linear} and @code{Log} are predefined in @code{graph}.

Scaling routines can be given two optional boolean arguments:
@code{automin} and @code{automax}. These default to @code{true}, but can
be respectively set to @code{false} to disable automatic selection of
"nice" axis minimum and maximum values. @code{Linear}
can also take as an optional final argument a multiplicative scaling
factor (e.g. for a depth axis, @code{Linear(-1)} requests axis reversal). 

@cindex logarithmic graph
@cindex log-log graph
For example, to draw a log graph of a function, use @code{scale(Log,Log)}:
@verbatiminclude loggraph.asy
@image{loggraph}

@cindex grid
By extending the ticks, one can easily produce a logarithmic grid:
@verbatiminclude loggrid.asy
@image{loggrid}

One can also specify custom tick locations and formats for logarithmic axes:
@verbatiminclude logticks.asy
@image{logticks}

@cindex broken axis
Here is an example of a "broken" linear @math{x} axis that omits the
segment [3,8]:
@verbatiminclude brokenaxis.asy
@image{brokenaxis}

@cindex secondary axis
@cindex @code{secondaryX}
@cindex @code{secondaryY}
@item @code{Asymptote} can draw secondary axes with the routines
@verbatim
picture secondaryX(picture primary=currentpicture, void f(picture));
picture secondaryY(picture primary=currentpicture, void f(picture));
@end verbatim

In this example, @code{secondaryY} is used to draw a secondary linear
@math{y} axis against a primary logarithmic @math{y} axis:
@verbatiminclude Bode.asy
@image{Bode}

A secondary logarithmic @math{y} axis can be drawn like this:
@verbatiminclude secondaryaxis.asy
@image{secondaryaxis}

@item Here is a histogram example, which uses the @code{stats} module.
@cindex @code{axis}
@verbatiminclude histogram.asy
@image{histogram}

@item Here is an example of reading column data in from a file and a
least-squares fit, using the @code{stats} module. 
@cindex @code{leastsquares}
@verbatiminclude leastsquares.asy
@image{leastsquares}

@item Here is an example that illustrates the general @code{axis} routine.
@cindex @code{axis}
@verbatiminclude generalaxis.asy
@image{generalaxis}

@item To draw a vector field along a path, first define a routine
that returns a path as a function of a relative position parameter
from [0,1] and use
@cindex @code{vector field}
@verbatim
typedef path vector(real);

void vectorfield(picture pic=currentpicture, path g, int n, 
                 vector vector, real arrowsize=0, real arrowlength=0,
                 pen p=currentpen);
@end verbatim
Here is a simple example of a flow field:
@verbatiminclude flow.asy
@image{flow}

@anchor{images}
@item @code{Asymptote} can also generate color density images
and palettes. The following palettes are predefined in
@code{palette.asy}: 

@table @code

@cindex @code{Grayscale}
@item pen[] Grayscale(int NColors=256)
a grayscale palette;

@cindex @code{Rainbow}
@item pen[] Rainbow(int NColors=65501)
a rainbow spectrum;

@cindex @code{BWRainbow}
@item pen[] BWRainbow(int NColors=65485)
a rainbow spectrum tapering off to black/white at the ends;

@cindex @code{BWRainbow2}
@item pen[] BWRainbow2(int NColors=65485)
a double rainbow palette tapering off to black/white at the ends, with
a linearly scaled intensity.
@end table

The function @code{cmyk(pen[] Palette)} may be used to convert any
of these palettes to the @acronym{CMYK} colorspace.
A color density plot can added to a picture @code{pic} by generating
from a real[][] array @code{data}, using palette @code{palette}, an image
spanning the rectangular region with opposite corners at coordinates
@code{initial} and @code{final}:
@verbatim
void image(picture pic=currentpicture, real[][] data, pen[] palette,
           pair initial, pair final);
@end verbatim

An optionally labelled palette bar may be generated with the routine
@verbatim
picture palette(real[][] data, real width=Ticksize,
                pen[] palette, Label L, pen p=currentpen,
                paletteticks ticks=PaletteTicks)
@end verbatim

The argument @code{paletteticks} is a special tick type (@pxref{ticks})
that takes the following arguments:
@verbatim
paletteticks PaletteTicks(int N=0, real Step=0,
                          bool beginlabel=true, bool endlabel=true,
                          Label format="", pen pTick=nullpen);
@end verbatim

The image and palette bar can be fit (and optionally aligned) to a frame 
and added to picture @code{dest} at the location @code{origin} using
@code{add(pair origin=0, picture dest=currentpicture, frame)}:

@anchor{image}
@verbatiminclude image.asy
@image{image}

@item The following scientific graphs, which illustrate many features of
@code{Asymptote}'s graphics routines, were generated from the examples
@code{diatom.asy} and @code{westnile.asy}, using the comma-separated
data in @code{diatom.csv} and @code{westnile.csv}.
@page

@image{diatom}
@image{westnile,,7.5cm}
@end enumerate

@page
@node three
@subsection @code{three}
@cindex @code{three}
@cindex @code{guide3}
@cindex @code{cycle3}
@cindex @code{curl3}
@cindex @code{tension3}
@cindex @code{controls}
This module fully extends the notion of guides and paths in @code{Asymptote}
to three dimensions, introducing the new types @code{guide3} and @code{path3},
along with a three-dimensional cycle specifier @code{cycle3}, tension operator
@code{tension3}, and curl operator @code{curl3}. Just as in two
dimensions, the nodes within a @code{guide3} can be qualified with
these operators and also with explicit directions and control points (using
braces and @code{controls}, respectively). This generalization of John
Hobby's spline algorithm is shape-invariant under three-dimensional rotation,
scaling, and shifting, and reduces in the planar case to the
two-dimensional algorithm used in @code{Asymptote}, @code{MetaPost},
and @code{MetaFont}.

For example, a unit circle in the @math{XY} plane may be filled and
drawn like this:
@verbatiminclude unitcircle3.asy
@image{unitcircle3}
@noindent
and then distorted into a saddle:
@verbatiminclude saddle.asy
@image{saddle}
@noindent


Here @code{O} is the triple @code{(0,0,0)} and @code{X},
@code{Y}, and @code{Z} are the triples @code{(1,0,0)},
@code{(0,1,0)}, and @code{(0,0,1)}, respectively.
A general circle can be drawn perpendicular to the direction
@code{normal} with the routine
@verbatim
path3 circle(triple c, real r, triple normal=Z);
@end verbatim

A circular arc centered at @code{c} with radius @code{r} from
@code{c+r*dir(theta1,phi1)} to @code{c+r*dir(theta2,phi2)},
drawing counterclockwise relative to the normal vector
@code{cross(dir(theta1,phi1),dir(theta2,phi2))} if @code{theta2 > theta1}
or if @code{theta2 == theta1} and @code{phi2 >= phi1}, can be constructed with
@verbatim
path3 arc(triple c, real r, real theta1, real phi1, real theta2, real phi2,
          triple normal=O);
@end verbatim
The normal must be explicitly specified if @code{c} and the endpoints
are colinear. If @code{r} < 0, the complementary arc of radius
@code{|r|} is constructed.
For convenience, an arc centered at @code{c} from triple @code{v1} to
@code{v2} (assuming @code{|v2-c|=|v1-c|}) in the direction CCW
(counter-clockwise) or CW (clockwise) may also be constructed with
@verbatim
path3 arc(triple c, triple v1, triple v2, triple normal=O,
          bool direction=CCW);
@end verbatim
@noindent
When high accuracy is needed, the routines @code{Circle} and
@code{Arc} defined in @code{graph3} may be used instead.
See @ref{surface} for an example of a three-dimensional circular arc.

A representation of the plane passing through point O with normal cross(u,v)
is given by
@verbatim
path3 plane(triple u, triple v, triple O=O);
@end verbatim
A three-dimensional box with opposite vertices at triples @code{v1}
and @code{v2} may be drawn with the function
@verbatim
guide3[] box(triple v1, triple v2);
@end verbatim
@noindent
For example, a unit cube is predefined as
@verbatim
guide3[] unitcube=box((0,0,0),(1,1,1));
@end verbatim

These projections to two dimensions are predefined:
@table @code
@item oblique
@cindex oblique
The point @code{(x,y,z)} is projected to @code{(x-0.5z,y-0.5z)}.
If an optional real argument is given to @code{oblique}, the
negative @math{z} axis is drawn at this angle in degrees measured
counterclockwise from the positive @math{x} axis. 

@item orthographic(triple camera)
@item orthographic(real x, real y, real z)
@cindex orthographic
This projects three dimensions onto two using the view seen at the
location @code{camera} or @code{(x,y,z)}, respectively.
Parallel lines are projected to parallel lines.

@item perspective(triple camera)
@item perspective(real x, real y, real z)
@cindex perspective
These project three dimensions onto two taking account of perspective,
as seen from the location @code{camera} or @code{(x,y,z)}, respectively.

@end table

@cindex @code{currentprojection}
The default projection, @code{currentprojection}, is initially set to
@code{perspective(5,4,2)}.

@cindex @code{transform}
Three-dimensional objects may be transformed with one of the following
built-in @code{transform3} types:

@table @code
@item shift(triple v)
@cindex @code{shift}
translates by the triple @code{v};
@item xscale3(real x)
@cindex @code{xscale3}
scales by @code{x} in the @math{x} direction;
@item yscale3(real y)
@cindex @code{yscale3}
scales by @code{y} in the @math{y} direction;
@item zscale3(real z)
@cindex @code{zscale3}
scales by @code{z} in the @math{z} direction;
@item scale3(real s)
@cindex @code{scale3}
scales by @code{s} in the @math{x}, @math{y}, and @math{z} directions;
@item rotate(real angle, triple v)
rotates by @code{angle} in degrees about an axis @code{v} through the origin;
@item rotate(real angle, triple u, triple v)
rotates by @code{angle} in degrees about the axis @code{u--v};
@item reflect(triple u, triple v, triple w)
reflects about the plane through @code{u}, @code{v}, and @code{w}.
@end table

@cindex @code{length}
@cindex @code{size}
@cindex @code{point}
@cindex @code{dir}
@cindex @code{precontrol}
@cindex @code{postcontrol}
@cindex @code{arclength}
@cindex @code{arctime}
@cindex @code{reverse}
@cindex @code{subpath}
@cindex @code{intersect}
@cindex @code{intersectpoint}
@cindex @code{min}
@cindex @code{max}
@cindex @code{cyclic}
@cindex @code{straight}
@cindex @code{inside}
Three-dimensional versions of the path functions @code{length},
@code{size}, @code{point}, @code{dir}, @code{precontrol}, @code{postcontrol}, 
@code{arclength}, @code{arctime}, @code{reverse}, @code{subpath},
@code{intersect}, @code{intersectionpoint},
@code{min}, @code{max}, @code{cyclic}, and @code{straight} are also
defined in the module @code{three}.

@cindex hidden surface removal
@cindex @code{face}
Planar hidden surface removal is implemented with a binary space
partition and picture clipping. A planar path is first converted to a
struct @code{face} derived from @code{picture}. A @code{face} may be given to
a drawing routine in place of any @code{picture} argument.  An array
of such faces may then be drawn, removing hidden surfaces:
@verbatim
void add(picture pic=currentpicture, face[] faces,
         projection P=currentprojection);
@end verbatim
Here is an example showing three orthogonal intersecting planes:
@verbatiminclude planes.asy
@image{planes}

Here is an example showing all five three-dimensional path connectors:
@verbatiminclude join3.asy
@image{join3}

@cindex @code{bbox3}
@cindex @code{aspect}
A three-dimensional bounding box structure is returned by calling 
@code{bbox3(triple min, triple max)} with the opposite corners
@code{min} and @code{max}. This can be used to adjust the aspect ratio
(see the example helix.asy):
@verbatim
void aspect(picture pic=currentpicture, bbox3 b,
            real x=0, real y=0, real z=0);
@end verbatim

Further three-dimensional examples are provided in the files
@code{near_earth.asy}, @code{conicurv.asy}, and (in the animations
subdirectory) @code{cube.asy}.

@node graph3
@subsection @code{graph3}
@cindex @code{graph3}
@cindex 3D graphs
This module implements three-dimensional versions of the
functions in @code{graph.asy}. They work much like their
two-dimensional counterparts, except that the user has to keep track
of the three-dimensional axes limits (which in two dimension are stored in
the picture) in a @code{bbox3} bounding box. The function
@cindex @code{bbox3}
@cindex @code{autolimits}
@verbatim
bbox3 autolimits(picture pic=currentpicture, triple min, triple max);
@end verbatim
@noindent
can be used to determine ``nice'' values for the bounding box corners.
A user-space bounding box that takes into account of the axes scalings
for picture @code{pic} is returned by
@cindex @code{limits}
@verbatim
bbox3 limits(picture pic=currentpicture, triple min, triple max);
@end verbatim

To crop a bounding box to a given interval use:
@cindex @code{xlimits}
@cindex @code{ylimits}
@cindex @code{zlimits}
@cindex @code{limits}
@verbatim
void xlimits(bbox3 b, real min, real max);
void ylimits(bbox3 b, real min, real max);
void zlimits(bbox3 b, real min, real max);
void limits(bbox3 b, triple min, triple max);
@end verbatim

@cindex @code{xaxis}
To draw an @math{x} axis in three dimensions from triple @code{min} to
triple @code{max} with ticks in the direction @code{dir}, use the routine
@verbatim
void xaxis(picture pic=currentpicture, Label L="", triple min, triple max,
           pen p=currentpen, ticks ticks=NoTicks, triple dir=Y,
           arrowbar arrow=None, bool put=Above,
           projection P=currentprojection, bool opposite=false);
@end verbatim
To draw an @math{x} axis in three dimensions using @code{bbox3 b}
with ticks in the direction @code{dir}, use the routine
@verbatim
void xaxis(picture pic=currentpicture, Label L="", bool all=false,
           bbox3 b, pen p=currentpen, ticks ticks=NoTicks,
           triple dir=Y, arrowbar arrow=None, bool put=Above,
           projection P=currentprojection);
@end verbatim
@noindent
If @code{all=true}, also draw opposing edges of the three-dimensional
bounding box.
@noindent
Analogous routines can be used to draw @code{y} and @code{z} axes in
three dimensions.

Here is an example of a helix and bounding box axes with rotated tick
and axis labels, using orthographic projection:
@verbatiminclude helix.asy
@image{helix}

The next example illustrates three-dimensional @math{x}, @math{y}, and
@math{z} axes, with autoscaling of the upper @math{z} limit disabled:
@cindex @code{axis}
@verbatiminclude axis3.asy
@image{axis3}

One can also place ticks along a general three-dimensional axis:
@cindex @code{axis}
@verbatiminclude generalaxis3.asy
@image{generalaxis3}

@page
Surface plots of functions and matrices are also implemented:
@verbatim
picture surface(real f(pair z), pair a, pair b, int n=nmesh, int nsub=nsub,
		pen surfacepen=lightgray, pen meshpen=currentpen,
		projection P=currentprojection);
picture surface(real[][] f, pair a, pair b,
		pen surfacepen=lightgray, pen meshpen=currentpen,
		projection P=currentprojection);
@end verbatim
@noindent
Here is an example of a Gaussian surface:
@anchor{surface}
@verbatiminclude surface.asy
@image{surface}

@node featpost3D
@subsection @code{featpost3D}
@cindex @code{featpost3D}
To facilitate the conversion of existing MetaPost programs,
this module contains a partial port of the @code{MetaPost} 3D package
@code{featpost3D}  of L. Nobre G., C. Barbarosie, and J. Schwaiger to
@code{Asymptote}. However, much (but not all) of the functionality of
this port is now obsoleted by the general package @code{three},
which fully extends the notion of a path to three-dimensions. The
original package is documented at
@quotation
@url{http://matagalatlante.org/nobre/featpost/doc/featpost.html}
@end quotation

@node math
@subsection @code{math}
@cindex @code{math}
This package extends @code{Asymptote}'s mathematical capabilities with
radian/degree conversion routines, point-in-polygon and intersection
algorithms, matrix arithmetic and inversion, and a linear
equation solver (via Gauss-Jordan elimination).

@cindex @code{implicit linear solver}
@cindex @code{MetaPost whatever}
@cindex @code{extension}
Unlike @code{MetaPost}, @code{Asymptote} does not implicitly solve
linear equations and therefore does not have the notion of a
@code{whatever} unknown. The following routine provides a useful
replacement for a common use of @code{whatever}: finding the
intersection point of the lines through @code{P}, @code{Q}
and @code{p}, @code{q}, respectively:

@table @code

@item pair extension(pair P, pair Q, pair p, pair q);
Return the intersection point of the extensions of the line segments 
@code{PQ} and @code{pq}.

@end table

Here are some additional routines provided in the @code{math} package:

@table @code

@cindex @code{drawline}
@item void drawline(picture pic=currentpicture, pair P, pair Q, pen p=currentpen);
draw the visible portion of the (infinite) line going through
@code{P} and @code{Q}, without altering the size of picture @code{pic},
using pen @code{p}.

@cindex @code{intersect}
@item real intersect(triple P, triple Q, triple n, triple Z);
Return the intersection time of the extension of the line segment @code{PQ}
with the plane perpendicular to @code{n} and passing through @code{Z}.

@cindex @code{intersection}
@item triple intersectionpoint(triple n0, triple P0, triple n1, triple P1);
Return any point on the intersection of the two planes with normals
@code{n0} and @code{n1} passing through points @code{P0} and @code{P1},
respectively. If the planes are parallel, return
@code{(infinity,infinity,infinity)}.

@cindex @code{solve}
@item real[] solve(real[][] a, real[] b)
Solve the linear equation @math{@code{a}x=@code{b}} 
by Gauss-Jordan elimination, returning
the solution @math{x}, where @code{a} is an @math{n \times n} matrix and
@code{b} is an array of length @math{n}. 
For example:
@verbatim
import math;
real[][] a={{1,-2,3,0},{4,-5,6,2},{-7,-8,10,5},{1,50,1,-2}};
real[] b={7,19,33,3};
real[] x=solve(a,b);
write(a); write();
write(b); write();
write(x); write();
write(a*x);
@end verbatim
If the matrix @code{a} is tridiagonal, the routine @code{tridiagonal} provides
a more efficient algorithm (@pxref{tridiagonal}). 

@cindex @code{solve}
@item real[][] solve(real[][] a, real[][] b, bool overwrite=false)
Solve the linear equation @math{@code{a}x=@code{b}} returning the
solution @math{x}, where @code{a} is an @math{n \times n} matrix and
@code{b} is an @math{n \times m} matrix. If overwrite=true, @math{b} is
replaced by @code{x}.

@cindex @code{straight}
@item bool straight(path p)
returns @code{true} iff the path @code{p} is straight.

@end table

@node geometry
@subsection @code{geometry}
@cindex @code{geometry}
@cindex @code{triangle}
@cindex @code{perpendicular}
This module provides the beginnings of a geometry package.
It currently includes a triangle structure and functions to draw
interior arcs of triangles and perpendicular symbols.

@node stats
@subsection @code{stats}
@cindex @code{stats}
@cindex @code{leastsquares}
This package implements a Gaussian random number generator
and a collection of statistics routines, including @code{histogram}
and @code{leastsquares}.

@node patterns
@subsection @code{patterns}
@cindex @code{patterns}
This package implements @code{Postscript} tiling patterns and includes
several convenient pattern generation routines.

@node palette
@subsection @code{palette}
@cindex @code{palette}
This package implements color density images and palette bars,
along with several predefined palettes (@pxref{images}).

@node tree
@subsection @code{tree}
@cindex @code{tree}
This package implements an example of a dynamic binary search tree.

@node drawtree
@subsection @code{drawtree}
@cindex @code{drawtree}
This is a simple tree drawing module used by the example @code{treetest.asy}.

@node feynman
@subsection @code{feynman}
@cindex @code{feynman}
This package, contributed by Martin Wiebusch, is useful for drawing
Feynman diagrams, as illustrated by the examples @code{eetomumu.asy}
and @code{fermi.asy}.

@node MetaPost
@subsection @code{MetaPost}
@cindex @code{MetaPost}
This package provides some useful routines to help @code{MetaPost} users
migrate old @code{MetaPost} code to @code{Asymptote}.

@node unicode
@subsection @code{unicode}
@cindex @code{unicode}
Import this package at the beginning of the file to instruct
@code{LaTeX} to accept @code{unicode} (UTF-8) standardized international
characters. You will also need to set up @code{LaTeX} support for
@code{unicode} by unpacking in your @code{LaTeX} source directory
(e.g. @code{/usr/share/texmf/tex/latex}) the file
@quotation
@url{http://www.unruh.de/DniQ/latex/unicode/unicode.tgz}
@end quotation

and then running the command 
@verbatim
texhash
@end verbatim

@cindex Cyrillic
To use cyrillic fonts, you will need to change the font encoding:
@verbatim
import unicode;
texpreamble("\usepackage{mathtext} \usepackage[russian]{babel}");
defaultpen(font("T2A","cmr"));
@end verbatim

@node latin1
@subsection @code{latin1}
@cindex @code{latin1}
If you don't have @code{LaTeX} support for @code{unicode} installed,
you can enable support for Western European languages (ISO 8859-1) by
importing the module @code{latin1}. This module can be used as a
template for providing support for other ISO 8859 alphabets.

@node babel
@subsection @code{babel}
@cindex @code{babel}
This module implements the @code{LaTeX} @code{babel} package in
@code{Asymptote}. For example:
@verbatim
import babel;
babel("german");
@end verbatim

@node Static
@section Static
@cindex @code{static}

Static qualifiers allocate the memory address of a variable in a higher 
enclosing scope.

For a function body, the variable is allocated in the block where the
function is defined; so in the code
@verbatim
struct s {
  int count() {
    static int c=0;
    ++c;
    return c;
  }
}
@end verbatim

@noindent
there is one instance of the variable @code{c} for each
object @code{s} (as opposed for each call of @code{count}). 

Similarly, in
@verbatim
int factorial(int n) {
  int helper(int k) {
    static int x=1;
    x *= k;
    return k == 1 ? x : helper(k-1);
  }
  return helper(n);
}
@end verbatim

@noindent
there is one instance of @code{x} for every call to
@code{factorial} (and not for every call to @code{helper}), so this is
a correct, but ugly, implementation of factorial.

Similarly, a static variable declared within a structure is allocated in
the block where the structure is defined. Thus,
@verbatim
struct A {
  struct B {
    static pair z;
  }
}
@end verbatim

@noindent 
creates one object @code{z} for each object of type @code{A} created.

In this example,
@verbatim
int pow(int n, int k) {
  struct A {
    static int x=1;
    void helper() {
      x *= n;
    }
  }
  A operator init() {return new A;}
  for (int i=0; i < k; ++i) {
    A a;
    a.helper();
  }
  return A.x;
}
@end verbatim

@noindent
there is one instance of @code{x} for each call to @code{pow}, so this
is an ugly implementation of exponentiation.

@node Drawing commands
@chapter Drawing commands
@cindex drawing commands

All of @code{Asymptote}'s graphical capabilities are based on four primitive
commands. The three @code{PostScript} drawing commands @code{draw},
@code{fill}, and @code{clip} add objects to a picture in the order in
which they are executed, with the most recently drawn object appearing on top.
The labeling command @code{label} can be used to add text
labels and external @acronym{EPS} images, which will appear on top of the
@code{PostScript} objects (since this is normally what one wants), but
again in the relative order in which they were executed. After drawing
objects on a picture, the picture can be output with the
@code{shipout} function (@pxref{shipout}).

@cindex @code{layer}
If you wish to draw @code{PostScript} objects on top of labels (or verbatim
@code{tex} commands; @pxref{tex}), the @code{layer} command may be
used to start a
new @code{PostScript/LaTeX} layer:
@verbatim
void layer(picture pic=currentpicture);
@end verbatim

The @code{layer} function gives one full control over the order in which
objects are drawn. Layers are drawn sequentially, with the most recent
layer appearing on top. Within each layer, labels, images, and
verbatim @code{tex} commands are always drawn after the
@code{PostScript} objects in that layer.

While some of these drawing commands take many options, they all have sensible
default values (for example, the picture argument defaults to
currentpicture).

@cindex legend
@cindex @code{draw}
@cindex @code{arrow}
@menu
* draw::                        Draw a path on a picture or frame
* fill::                        Fill a cyclic path on a picture or frame
* clip::                        Clip a picture or frame to a cyclic path
* label::                       Label a point on a picture
@end menu

@node draw
@section draw
@verbatim 
void draw(picture pic=currentpicture, Label L="", path g,
          align align=NoAlign, pen p=currentpen,
          arrowbar arrow=None, arrowbar bar=None, margin margin=NoMargin,
          string legend="", marker marker=nomarker);
@end verbatim

Draw the path @code{g} on the picture @code{pic} using pen @code{p}
for drawing, with optional drawing attributes (Label @code{L},
explicit label alignment @code{align},
arrows and bars @code{arrow} and @code{bar}, margins @code{margin},
legend, and markers @code{marker}). Only one parameter, the path, is 
required. For convenience, the arguments @code{arrow} and @code{bar} may be
specified in either order. The argument @code{legend} is a string to
use in constructing an optional legend entry.

@cindex @code{None}
@cindex @code{BeginBar}
@cindex @code{EndBar}
@cindex @code{Bar}
@cindex @code{Bars}
Bars are useful for indicating dimensions. The possible values of
@code{bar} are @code{None}, @code{BeginBar}, @code{EndBar} (or
equivalently @code{Bar}), and @code{Bars} (which draws a bar at both
ends of the path). Each of these bar specifiers (except for
@code{None}) will accept an optional real argument that denotes the
length of the bar in @code{PostScript} coordinates. The default
bar length is @code{barsize(p)}.

@anchor{arrows}
@cindex @code{None}
@cindex @code{Blank}
@cindex @code{BeginArrow}
@cindex @code{MidArrow}
@cindex @code{EndArrow}
@cindex @code{Arrow}
@cindex @code{Arrows}
@cindex @code{Fill}
@cindex @code{NoFill}
@cindex @code{BeginArcArrow}
@cindex @code{EndArcArrow}
@cindex @code{ArcArrow}
@cindex @code{ArcArrows}
The possible values of @code{arrow} are @code{None}, @code{Blank}
(which draws no arrows or path), @code{BeginArrow}, @code{MidArrow},
@code{EndArrow} (or equivalently @code{Arrow}),
and @code{Arrows} (which draws an arrow at both ends of the path).
These arrow specifiers (except for @code{None} and @code{Blank})
may be given the optional arguments real
@code{size} (arrowhead size in @code{PostScript} coordinates),
real @code{angle} (arrowhead angle in degrees),
@code{Fill} or @code{NoFill}, and (except also for @code{MidArrow} and
@code{Arrows}) a relative real @code{position}
along the path (an @code{arctime}) where the tip of the arrow should
be placed. The default arrowhead size is @code{arrowheadsize(p)}.
There are also arrow versions with slightly modified
default values of @code{size} and @code{angle} suitable for curved
arrows: @code{BeginArcArrow}, @code{EndArcArrow} (or equivalently
@code{ArcArrow}), @code{MidArcArrow}, and @code{ArcArrows}.

@cindex @code{NoMargin}
@cindex @code{BeginMargin}
@cindex @code{EndMargin}
@cindex @code{Margin}
@cindex @code{Margins}
@cindex @code{BeginPenMargin}
@cindex @code{EndPenMargin}
@cindex @code{PenMargin}
@cindex @code{PenMargins}
@cindex @code{BeginDotMargin}
@cindex @code{EndDotMargin}
@cindex @code{DotMargin}
@cindex @code{DotMargins}
@cindex @code{Margin}
@cindex @code{TrueMargin}
Margins can be used to shrink the visible portion of a path by
@code{labelmargin(p)} to avoid overlap with other drawn objects.
Typical values of @code{margin} 
are @code{NoMargin}, @code{BeginMargin}, @code{EndMargin} (or
equivalently @code{Margin}), and @code{Margins} (which leaves a margin
at both ends of the path). One may use @code{Margin(real begin, real end)}
to specify the size of the beginning and ending margin, respectively,
in multiples of the units @code{labelmargin(p)} used for aligning labels.
Alternatively, @code{BeginPenMargin}, @code{EndPenMargin}
(or equivalently @code{PenMargin}), @code{PenMargins},
@code{PenMargin(real begin, real end)} specify a margin in units of
the pen linewidth, taking account of the pen linewidth when drawing
the path or arrow. For example, use @code{DotMargin}, an
abbreviation for @code{PenMargin(-0.5,0.5*dotfactor)},
to draw from the usual beginning point just up to the boundary of an
end dot of width @code{dotfactor*linewidth(p)}.  The qualifiers
@code{BeginDotMargin}, @code{EndDotMargin}, and @code{DotMargins} work
similarly. The qualifier @code{TrueMargin(real begin, real end)} allows one to
specify a margin directly in @code{PostScript} units, independent of
the pen linewidth.

The use of arrows, bars, and margins is illustrated by the examples
@code{Pythagoras.asy}, @code{sqrtx01.asy}, and @code{triads.asy}.

The legend for a picture @code{pic} can be fit and aligned to a frame
with the routine (@pxref{filltype})
@verbatim
frame legend(picture pic=currentpicture, pair dir=0, 
             real xmargin=legendmargin, real ymargin=xmargin,
             pen p=currentpen);
@end verbatim
@noindent
this legend frame can then be added about the point @code{origin} to a
picture @code{dest} using @code{add} or @code{attach} (@pxref{add about}).

@cindex @code{dot}
To draw a dot, simply draw a path containing a single point.
The @code{dot} command defined in @code{plain.asy} draws a dot having a
a diameter equal to an explicit pen linewidth or the default linewidth
magnified by @code{dotfactor} (6 by default):
@verbatim
void dot(picture pic=currentpicture, pair z, pen p=currentpen);
void dot(picture pic=currentpicture, pair[] z, pen p=currentpen);
void dot(picture pic=currentpicture, Label L, pair z, align align=NoAlign,
         string format=defaultformat, pen p=currentpen)
void dot(picture pic=currentpicture, Label L, pen p=currentpen)
@end verbatim

@cindex @code{Label}
The third routine draws a dot at every point of a pair array @code{z}.
If the special variable @code{Label} is given as the @code{Label}
argument to the fourth routine, the @code{format} argument will be
used to format a string based on the dot location (here @code{defaultformat}
is @code{"$%.4g$"}). One can also draw a dot at every node of a path:
@verbatim
void dot(picture pic=currentpicture, guide g, pen p=currentpen);
@end verbatim
See @ref{markers} for a more general way of marking path nodes.

To draw a fixed-sized object (in @code{PostScript} coordinates) about the user
coordinate @code{origin}, use the routine
@cindex @code{draw}
@verbatim
void draw(pair origin, picture pic=currentpicture, Label L="", path g,
          align align=NoAlign, pen p=currentpen, arrowbar arrow=None,
          arrowbar bar=None, margin margin=NoMargin, string legend="",
          marker marker=nomarker);
@end verbatim

@cindex @code{fill}
@node fill
@section fill
@verbatim
void fill(picture pic=currentpicture, path g, pen p=currentpen);
@end verbatim

Fill the interior region bounded by the cyclic path @code{g} on the picture
@code{pic}, using the pen @code{p}. 

@cindex @code{filldraw}
There is also a convenient @code{filldraw} command, which fills the path
and then draws in the boundary. One can specify separate pens for each
operation:
@verbatim
void filldraw(picture pic=currentpicture, path g, pen fillpen=currentpen,
              pen drawpen=currentpen);
@end verbatim

@cindex @code{fill}
This fixed-size version of @code{fill} allows one to fill an object
described in @code{PostScript} coordinates about the user coordinate
@code{origin}:
@verbatim
void fill(pair origin, picture pic=currentpicture, path g, pen p=currentpen);
@end verbatim

@noindent
This is just a convenient abbreviation for the commands:
@verbatim
picture opic;
fill(opic,g,p);
add(origin,pic,opic);
@end verbatim

@anchor{gradient shading}
@cindex gradient shading

@cindex shading
@cindex lattice shading
Lattice gradient shading varying smoothly over a two-dimensional
array of pens @code{p}, using fillrule @code{fillrule}, can be produced with
@verbatim
void latticeshade(picture pic=currentpicture, path g,
                  pen fillrule=currentpen, pen[][] p)
@end verbatim
The pens in @code{p} must belong to the same color space. One can use the
functions @code{rgb(pen)} or @code{cmyk(pen)} to promote pens to a
higher color space, as illustrated in the example file
@code{latticeshading.asy}.

@cindex axial shading
Axial gradient shading varying smoothly from @code{pena} to @code{penb} in the
direction of the line segment @code{a--b} can be achieved with
@verbatim
void axialshade(picture pic=currentpicture, path g,
                pen pena, pair a,
                pen penb, pair b);
@end verbatim

@cindex radial shading
Radial gradient shading varying smoothly from
@code{pena} on the circle with center @code{a} and radius @code{ra} to
@code{penb} on the circle with center @code{b} and radius @code{rb} 
is similar:
@verbatim
void radialshade(picture pic=currentpicture, path g,
                 pen pena, pair a, real ra,
                 pen penb, pair b, real rb);
@end verbatim
@noindent
Illustrations of radial shading are provided in the example files
@code{shade.asy} and @code{ring.asy}.

@cindex Gouraud shading
Gouraud shading using fillrule @code{fillrule} and the vertex colors in the
pen array @code{p} on a triangular lattice defined by the vertices
@code{z} and edge flags @code{edges} is implemented with
@verbatim
void gouraudshade(picture pic=currentpicture, path g,
                  pen fillrule=currentpen, pen[] p, pair[] z,
                  int[] edges);
@end verbatim
@noindent
The pens in @code{p} must belong to the same color space.
An illustration of Gouraud shading is provided in the example file
@code{Gouraud.asy}.

@cindex unfill
The following routine uses @code{evenodd} clipping together with the
@code{^^} operator to unfill a region:

@verbatim
void unfill(picture pic=currentpicture, path g);
@end verbatim

@page
@cindex @code{clip}
@node clip
@section clip
@verbatim 
void clip(picture pic=currentpicture, path g, pen p=currentpen);
@end verbatim

Clip the current contents of picture @code{pic} to the region bounded
by the path @code{g}, using fillrule @code{p} (@pxref{fillrule}).
For an illustration of picture clipping, see the first example in
@ref{LaTeX usage}.

@cindex @code{label}
@node label
@section label
@verbatim
void label(picture pic=currentpicture, Label L, pair position,
           align align=NoAlign, pen p=nullpen, filltype filltype=NoFill)
@end verbatim

Draw Label @code{L} on picture @code{pic} using pen @code{p}. If
@code{align} is @code{NoAlign}, the label will be centered at user
coordinate @code{position}; otherwise it will be aligned in the
direction of @code{align} and displaced from @code{position} by
the @code{PostScript} offset @code{align*labelmargin(p)}.
If @code{p} is @code{nullpen}, the pen specified within the
Label, which defaults to @code{currentpen}, will be used.
@anchor{Label}
The Label @code{L} can either be a string or the structure obtained by calling
one of the functions
@verbatim
Label Label(string s="", pair position, align align=NoAlign,
            pen p=nullpen, filltype filltype=NoFill);
Label Label(string s="", align align=NoAlign,
            pen p=nullpen, filltype filltype=NoFill);
Label Label(Label L, pair position, align align=NoAlign,
            pen p=nullpen, filltype filltype=NoFill);
Label Label(Label L, align align=NoAlign,
            pen p=nullpen, filltype filltype=NoFill);
@end verbatim
The text of a Label can be scaled horizontally and/or vertically
by multiplying it on the left with @code{xscale(real)},
@code{yscale(real)}, or @code{scale(real)}.
After optionally scaling a Label, it can be rotated by an angle by
multiplying it on the left with a rotation (in degrees): for example,
@code{rotate(45)*xscale(2)*L} first scales @code{L} in the @math{x}
direction and then rotates it counterclockwise by 45 degrees.
The final position of a Label can also be shifted by a
@code{PostScript} coordinate translation like this: @code{shift(10,0)*L}.

To add a label to a path, use
@verbatim
void label(picture pic=currentpicture, Label L, path g, align align=NoAlign,
           pen p=nullpen, filltype filltype=NoFill);
@end verbatim
@cindex @code{Relative}
By default the label will be positioned at the midpoint of the path.
An alternative label location (an @code{arctime} value between 0 and
@code{length(g)} @pxref{arctime}) may be specified as real value for
@code{position} in constructing the Label. The position
@code{Relative(real)} specifies a location relative to the total
arclength of the path.

@cindex @code{Relative}
@cindex @code{LeftSide}
@cindex @code{Center}
@cindex @code{RightSide}
Path labels are aligned in the direction @code{align}, which may
be specified as an absolute compass direction (pair) or a direction
@code{Relative(pair)} measured relative to a north axis
in the local direction of the path. For convenience @code{LeftSide},
@code{Center}, and @code{RightSide} are defined as @code{Relative(W)},
@code{Relative((0,0))}, and @code{Relative(E)}, respectively.
Multiplying @code{LeftSide}, @code{Center}, @code{RightSide} on the
left by a real scaling factor will move the label further away from or
closer to the path.

A label with a fixed-size arrow of length @code{arrowlength} pointing
to @code{b} from direction @code{dir} can be produced with the routine
@cindex @code{arrow}
@verbatim
void arrow(picture pic=currentpicture, Label L="", pair b, pair dir,
           real length=arrowlength, align align=NoAlign,
           pen p=currentpen, arrowbar arrow=Arrow, margin margin=EndMargin);
@end verbatim
If no alignment is specified (either in the Label or as an explicit
argument), the optional Label will be aligned in the direction @code{dir},
using margin @code{margin}.

@cindex including images
@cindex @code{include}
@cindex @acronym{EPS}
The function @code{string includegraphics(string name, string options="")}
returns a string that can be used to include an encapsulated
@code{PostScript} (@acronym{EPS}) file. Here, @code{name} is the name
of the file to include and @code{options} is a string containing a
comma-separated list of optional bounding box (@code{bb=llx lly urx
ury}), width (@code{width=value}), height (@code{height=value}),
rotation (@code{angle=value}), scaling (@code{scale=factor}), clipping
(@code{clip=bool}), and draft mode (@code{draftx=bool}) parameters. The
@code{layer()} function can be used to force future objects to be
drawn on top of the included image:
@verbatim
label(includegraphics("file.eps","width=1cm"),(0,0),NE);
layer();
@end verbatim

@cindex @code{baseline}
The @code{string baseline(string s, align align=S, string template="M")} 
function can be used to enlarge the bounding box of letters aligned
below a horizontal line to match a given template, so that their
baselines lie on a horizontal line. See @code{Pythagoras.asy} for an
example.

@cindex @code{minipage}
The @code{string minipage(string s, width=100pt)} function can be used
to format string @code{s} into a paragraph of width @code{width}, as
illustrated in the following example:
@verbatiminclude mosquito.asy

@image{mosquito}

One can prevent labels from overwriting one another with the
@code{overwrite} pen attribute (@pxref{overwrite}).


@node LaTeX usage
@chapter @code{LaTeX} usage
@cindex @code{LaTeX} usage
@cindex @code{asymptote.sty}

@code{Asymptote} comes with a convenient @code{LaTeX} style file
@code{asymptote.sty} that makes @code{LaTeX}
@code{Asymptote}-aware. Entering @code{Asymptote} code
directly into the @code{LaTeX} source file, at the point where it is
needed, keeps figures organized and avoids the need to invent new file
names for each figure. Simply add the line
@code{\usepackage@{asymptote@}} at the beginning of your file
and enclose your @code{Asymptote} code within a
@code{\begin@{asy@}...\end@{asy@}} environment. As with the
@code{LaTeX} @code{comment} environment, the @code{\end@{asy@}} command
must appear on a line by itself, with no leading spaces or trailing
commands/comments.

The sample @code{LaTeX} file below, named @code{latexusage.tex}, can
be run as follows:
@verbatim
latex latexusage
asy latexusage
latex latexusage
@end verbatim

If the @code{[inline]} package option is given to
@code{asymptote.sty}, and the @code{-t} option is given to @code{asy},
inline @code{LaTeX} code is generated instead of @code{EPS} files.
This makes LaTeX symbols visible to the
@code{\begin@{asy@}...\end@{asy@}} environment.  In this mode,
Asymptote correctly aligns LaTeX symbols defined outside of
@code{\begin@{asy@}...\end@{asy@}}, but treats their size as zero; an
optional second string can be given to @code{Label} to provide an
estimate of the unknown label size. Note that labels might not show up
in @acronym{DVI} viewers that cannot handle raw @code{PostScript} code; use
@code{dvips}/@code{dvipdf} to produce @code{PostScript}/@acronym{PDF}
output. We recommend using the modified version of @code{dvipdf} in
the @code{Asymptote} patches directory, which accepts the @code{dvips
-z} hyperdvi option. 

Here now is @code{latexusage.tex}:
@verbatiminclude latexusage.tex
@page
@image{latexusage,,25cm}

@node Options
@chapter Options
@cindex options
Type @code{asy -h} to see the full list of command line options
supported by @code{Asymptote}:
@verbatim
Usage: asy [options] [file ...]

Options: 

-V, -View        View output file (MSDOS default)
-nV, -nView      Don't view output file (UNIX default)
-n, -no          Negate next option
-x magnification Deconstruct into transparent GIF objects
-c               Clear GUI operations
-i               Ignore GUI operations
-f format        Convert each output file to specified format
-o name          (First) output file name (- denotes standard output)
-h, -help        Show summary of options
-O pair          PostScript offset
-C               Center on page (default)
-B               Align to bottom-left corner of page
-T               Align to top-left corner of page
-Z               Position origin at (0,0) (implies -L)
-d               Enable debugging messages
-v, -verbose     Increase verbosity level
-k               Keep intermediate files
-L               Disable LaTeX label postprocessing
-t               Produce LaTeX file for \usepackage[inline]{asymptote}
-p               Parse test
-s               Translate test
-l               List available global functions and variables
-m, -mask        Mask fpu exceptions (default for interactive mode)
-nm, -nmask      Don't mask fpu exceptions (default for batch mode)
-bw              Convert colors to black and white
-gray            Convert colors to grayscale
-rgb             Convert cmyk colors to rgb
-cmyk            Convert rgb colors to cmyk
-safe            Disable system call (default, negation ignored)
-unsafe          Enable system call (negation ignored)
-localhistory    Use a local interactive history file
-noplain         Disable automatic importing of plain

@end verbatim

If no arguments are given, @code{Asymptote} runs in interactive mode
(@pxref{Interactive mode}). In this case, the default output file
is @code{out.eps}.

If @code{-} is given as the file argument, @code{Asymptote} reads from
standard input.

If multiple files are specified, they are treated as separate
@code{Asymptote} runs.

An alternative output format may be produced by using the @code{-f format}
option. This supports any format supported by the @code{ImageMagick}
@code{convert} program (version 6.2.4 or later recommended).

If the option @code{-unsafe} is given, @code{Asymptote} runs
in unsafe mode. This enables the @code{int system(string)} call, allowing one
to execute arbitrary shell commands. The default mode, @code{-safe},
disables this call. 

The @code{-n} option can be used to negate the meaning of a following
option (except for the meanings of @code{-unsafe}, @code{-safe}, and
@code{-n} itself).

@cindex @code{ASYMPTOTE_PAPERTYPE}
By default, @code{Asymptote} attempts to center the figure on the
page, assuming that the paper type is @code{letter}. The default paper
type may be changed to @code{a4} with the environment variable
@code{ASYMPTOTE_PAPERTYPE}. Currently only these two paper types are
supported. Note that adding a new type, say @code{poster}, will also
require defining @code{posterSize} in the dvips configuration file.

@cindex offset
A @code{PostScript} offset may be specified as a pair (in bp units) with the
@code{-O} option:
@verbatim
asy -O 0,0 file
@end verbatim

The default offset is zero. The offset is adjusted if it would result in
a negative vertical bounding box coordinate.

Additional debugging output is produced with each additional @code{-v} option:
@table @code
@item -v
Display top-level module and final output file names.
@item -vv
Also display imported module names and final @code{LaTeX} and
@code{dvips} processing information.
@item -vvv
Also output @code{LaTeX} bidirectional pipe diagnostics.
@item -vvvv
Also output knot solver diagnostics.
@item -vvvvv
Also output @code{Asymptote} traceback diagnostics.
@end table

Default values for these options may also be entered in the file
@code{.asy/options} in the user's home directory (in the same format
as on the command line, except that the options may be distributed
over multiple lines). Command-line options override these defaults.

@node Interactive mode
@chapter Interactive mode
@cindex interactive mode
Interactive mode is entered by executing the command @code{asy} with
no file arguments. Each line must be a complete @code{Asymptote} statement;
however, it is not necessary to terminate each line with a semicolon.

The following special commands are supported only in interactive mode
and must be entered immediately after the prompt:

@table @code
@cindex @code{help}
@item help
view the manual
@item reset
reset @code{Asymptote} to its initial state, except that a prior call
to @code{scroll} is respected (@pxref{scroll}).
@item input FILE
resets the environment and does an @code{erase(); include FILE}. If
the file name @code{FILE} contains nonalphanumeric characters, enclose
it with quotation marks. For convenience, a trailing semi-colon 
followed by optional @code{Asymptote} commands may be entered on the same line.
@cindex @code{quit}
@cindex @code{exit}
@item quit
exit interactive mode (abbreviated as @code{q}; @code{exit} is a synonym).
A history of the most recent @code{1000} previous commands will be retained
in the file @code{.asy/history} in the user's home directory (unless
the command line option @code{-localhistory} was specified, in which case
the history will be stored in the file @code{.asy_history} in the
current directory).
@cindex @code{input}
@end table

Typing @code{ctrl-C} interrupts the execution of @code{Asymptote} code
and returns control to the interactive prompt.

Interactive mode is implemented with the GNU readline library.
To customize the key bindings, see:
@url{http://cnswww.cns.cwru.edu/php/chet/readline/readline.html}

@node GUI
@chapter Graphical User Interface
@cindex graphical user interface
@cindex @acronym{GUI}
@cindex mouse
@cindex wheel mouse
@cindex @code{Button-1}
@cindex @code{Button-2}
@cindex @code{xasy}

In the event that adjustments to the final figure are required, the
Graphical User Interface (@acronym{GUI}) @code{xasy} included with
@code{Asymptote}
allows you to move graphical objects around with mouse @code{Button-1}. 

To use @code{xasy}, one must first deconstruct @code{Asymptote}
pictures into transparent @acronym{GIF} images with the command
@code{asy -xN}, where @code{N} denotes the magnification (a positive
real number, say 2). The command @code{asy -VxN} automatically invokes
@code{xasy} once deconstruction is complete. Alternatively, one may
turn on the @code{-xN} option in interactive mode or from within a module
using the function @code{gui()} or @code{gui(N)}. One can turn GUI
mode off again with @code{gui(0)}.
Deconstruction requires that the @code{ImageMagick} @code{convert}
utility be installed.

The modified layout can be written to disk with the @code{w} key in a form
readable to @code{Asymptote}.
A wheel mouse is convenient for raising and lowering objects, to expose
the object to be moved. If a wheel mouse is not available, mouse
@code{Button-2} (lower) can be used repeatedly instead. Here are the
currently defined key mappings: 

@table @code
@item z
undo
@item r
redo
@item <Delete>
delete
@item w
write
@item q
quit
@end table

One can also draw connected line segments by holding down the shift key
and pressing mouse @code{Button-1} at each desired node.  Releasing the shift
key ends the definition of the path. More features will be added to
this preliminary @acronym{GUI} soon.

As @code{xasy} is written in the interactive scripting language
@code{Python/TK}, it requires that both @code{Python} and the
@code{tkinter} package be installed (included with @code{Python} under
@code{MSDOS}). Under @code{Fedora Core 4}, you can either install
@code{tkinter} with the command
@verbatim
yum install tkinter
@end verbatim
@noindent
or manually install the individual packages:
@verbatim
rpm -i tkinter-2.4.1-2.i386.rpm 
rpm -U --nodeps tix-8.1.4-100.i386.rpm
rpm -U --nodeps tk-8.4.9-3.i386.rpm 
@end verbatim

Deconstruction of compound objects (such as arrows) can be prevented 
by enclosing them within the commands
@verbatim
void begingroup(picture pic=currentpicture);
void endgroup(picture pic=currentpicture);
@end verbatim
By default, the elements of a picture or frame will be grouped
together on adding them to a picture. However, the elements of a frame
added to another frame are not grouped together by default: their
elements will be individually deconstructed (@pxref{add}).

@node PostScript to Asymptote
@chapter @code{PostScript} to @code{Asymptote}
The excellent @code{PostScript} editor @code{pstoedit} (version 3.42 or later; 
available from @url{http://pstoedit.net}) includes an
@code{Asymptote} backend. Unlike virtually all other @code{pstoedit}
backends, this driver includes native clipping, even-odd fill rule,
and @code{PostScript} subpath support. 

@noindent
For example, try:

@noindent
@code{asy -V @value{Datadir}/doc/asymptote/venn.asy}
@noindent
@verbatim
pstoedit -f asy venn.eps test.asy
asy -V test
@end verbatim

@noindent
If the line widths aren't quite correct, try giving @code{pstoedit} the
@code{-dis} option.
If the fonts aren't typeset correctly, try giving @code{pstoedit} the
@code{-dt} option.

Full image support can be added to the @code{Asymptote} backend
with the patch @code{pstoedit-3.42asy.patch}. 
Denoting the location of the @code{Asymptote} source directory by
@code{ASYMPTOTE_SOURCE}, one can install this patch with the commands
(as the @code{UNIX} root user):

@verbatim
tar -zxf pstoedit-3.42.tar.gz
cd pstoedit-3.42
patch -p1 < ASYMPTOTE_SOURCE/patches/pstoedit-3.42asy.patch
autoconf
./configure --prefix=/usr
make install
@end verbatim

@node Help
@chapter Help
@cindex help
@cindex forum
Questions on installing and using @code{Asymptote} should be sent to the
@code{Asymptote} forum.
@quotation
@url{http://sourceforge.net/forum/forum.php?forum_id=409349}
@end quotation
@noindent
Contributions in the form of patches or @code{Asymptote} modules can be
posted here:
@quotation
@url{http://sourceforge.net/tracker/?atid=685685&group_id=120000}
@end quotation
@noindent
To receive announcements of upcoming releases, please subscribe to
@code{Asymptote} at
@quotation
@url{http://freshmeat.net/subscribe/50750}
@end quotation
@cindex bug reports
@noindent
If you find a bug in @code{Asymptote}, please check (if possible)
whether the bug is still present in the latest @acronym{CVS} version before
submitting a bug report. New bugs can be submitted using the Bug
Tracking System at
@quotation
@url{http://sourceforge.net/projects/asymptote}
@end quotation
@noindent
@cindex stack overflow
@cindex segmentation fault
@cindex @code{libsigsegv}
@code{Asymptote} can be configured with the optional @acronym{GNU} library
@code{libsigsegv}, available from
@url{http://libsigsegv.sourceforge.net}, which allows one to distinguish
user-generated @code{Asymptote} stack overflows (@pxref{stack overflow})
from true segmentation faults (due to internal C++ programming errors;
please submit the @code{Asymptote} code that generates such segmentation
faults along with your bug report). 

@node Credits
@chapter Acknowledgments
@cindex acknowledgments

Financial support for the development of @code{Asymptote} was generously
provided by the Natural Sciences and Engineering Research Council of
Canada, the Pacific Institute for Mathematical Sciences, and the 
University of Alberta Faculty of Science.
     
We also would like to acknowledge the previous work of John D. Hobby, 
author of the program @code{MetaPost} that inspired the development of
@code{Asymptote}, and Donald E. Knuth, author of @TeX{} and
@code{MetaFont} (on which @code{MetaPost} is based).

The authors of @code{Asymptote} are Andy Hammerlindl, John Bowman, and
Tom Prince. Sean Healy designed the @code{Asymptote} logo.

@node Index
@unnumbered Index
     
@printindex cp
     
@bye

@c  LocalWords:  randMax Gaussrand asy cindex indices resized LaTeX TK latin au
@c  LocalWords:  latexusage tex bbox PostScript subdirectory gcc emacs ASYDIR
@c  LocalWords:  documentclass usepackage asydef subpath shipout sqrt xN  Mx bw
@c  LocalWords:  xscale xaxis yaxis BeginBar GIF postprocessing fpu de rpair xy
@c  LocalWords:  nomask noplain ImageMagick defaultfontsize defaultlinewidth cd
@c  LocalWords:  startup natively xasy tkinter VxN yingyang currentpicture toc
@c  LocalWords:  MetaPost MetaFont Hammerlindl Healy texinfo autoload setq setf
@c  LocalWords:  printindex setfilename settitle dircategory direntry titlepage
@c  LocalWords:  vskip filll insertcopying ifnottex detailmenu alist augroup PQ
@c  LocalWords:  bool behaviour facto zxf cvs login Debian dev filetypedetect
@c  LocalWords:  FFTW bp readline gv eps gifmerge args Boehm gc evenoddoverlap
@c  LocalWords:  boolean initializer expi dir xpart ypart STL substring rfind
@c  LocalWords:  pos substr strftime typedef pxref unitcircle yscale Bezier iff
@c  LocalWords:  postcontrol precontrol atleast nullpath arclength arctime rgb
@c  LocalWords:  dirtime currentpen colorspaces grayscale cmyk defaultpen x cx
@c  LocalWords:  linetype longdashed dashdotted longdashdotted linewidth y XP
@c  LocalWords:  fontsize defaultfilename keepAspect IgnoreAspect ise flushleft
@c  LocalWords:  NoWait src dest XDR txt getc fout stdin stdout endl xinput eof
@c  LocalWords:  xoutput Microsystem's eol struct exponentials postfix sayhi th
@c  LocalWords:  sqr intop addby libm asin acos atan sinh tanh asinh acosh cbrt
@c  LocalWords:  atanh fabs hypot fmod ceil srand dereferenced alice pete sqrtx
@c  LocalWords:  eval fft csv runtime nonalphanumeric labely LeftTicks NoTicks
@c  LocalWords:  RightTicks BottomTop LeftRight Ticksize UTF BufNewFile BufRead
@c  LocalWords:  ticksize subintervals xlimits filetype plugin setlocal makeprg
@c  LocalWords:  ylimits uncommented automin automax cp uninstall reals ecast
@c  LocalWords:  scaleT unicode RightSide yx yy NoAlign legendmargin opic CCW
@c  LocalWords:  arrowbar LeftSide EndBar BeginArrow lly featpost feynman isi
@c  LocalWords:  EndArrow BeginArcArrow EndArcArrow ArcArrow ArcArrows NoFill
@c  LocalWords:  filldraw fillpen drawpen errorformat bigsquare bezier darkblue
@c  LocalWords:  quartercircle darkgreen lightblue urx ury texpreamble sgn texi
@c  LocalWords:  lineargraph datagraph vertices parametricgraph uncomment ggv
@c  LocalWords:  loggraph generalaxis texhash arrowsize arrowangle arrowlength
@c  LocalWords:  SuppressQuiet MoveQuiet LIBREADLINE config PSVIEWER PDFVIEWER
@c  LocalWords:  ghostview gsview SIGHUP PDF acroread xpdf nullframe cutbefore
@c  LocalWords:  libsigsegv intersectionpoint dotfactor vv firstcut pq logticks
@c  LocalWords:  Unisys dvips vvv vvvv vvvvv traceback lastcut cutafter infodir
@c  LocalWords:  zxvf xargs cond polargraph xmin xmax plabel YZero labelling ln
@c  LocalWords:  ymin ymax XZero xequals tickmin tickmax unlabelled se pq pena
@c  LocalWords:  yequals Nobre Barbarosie Schwaiger nearearth conicurv Wiebusch
@c  LocalWords:  unfill PAPERTYPE posterSize ngraph interpolatetype ctrl dt pic
@c  LocalWords:  NNE jxf linecap linejoin unitsquare shadedtiling ei nomarker
@c  LocalWords:  westnile minipage infectiousM ra penb paletteticks drawline
@c  LocalWords:  susceptibleM flushright secondaryX secondaryY secondaryaxis
@c  LocalWords:  titlelabel columnlabel rb xtick ytick labelx XEquals YEquals
@c  LocalWords:  treetest eetomumu fermi backend pstoedit drawtree xFF MSDOS
@c  LocalWords:  vimrc CFLAGS verbatiminclude online noindent bezier superpath
@c  LocalWords:  evenodd squarecap roundcap extendcap miterjoin roundjoin NFSS
@c  LocalWords:  beveljoin fillrule zerowinding insideness lineskip cmr pcrr Hx
@c  LocalWords:  baselineskip AvantGarde Bookman Helvetica NewCenturySchoolBook
@c  LocalWords:  Palatino TimesRoman ZapfChancery ZapfDingbats german basealign
@c  LocalWords:  nondeconstructed backends usr venn labelsquare nobasealign dp
@c  LocalWords:  NoMargin BeginMargin EndMargin BeginPenMargin EndPenMargin dm
@c  LocalWords:  PenMargin PenMargins TrueMargin labelmargin errorbars errorbar
@c  LocalWords:  dpx dpy dmx dmy barsize arrowheadsize BeginDotMargin DotMargin
@c  LocalWords:  EndDotMargin DotMargins NColors BWRainbow colorspace labelled
@c  LocalWords:  PaletteTicks defaultformat leastsquares bjam fprintf endgroup
@c  LocalWords:  begingroup xmargin ymargin pbox box ellipse wget exe Gouraud
@c  LocalWords:  multithreaded newframe init emph nums concat xline yline zpart
@c  LocalWords:  colatitude zscale noView cosh nullpen MetaFontbook cyclicflag
@c  LocalWords:  nodeps Ghostgum beginlabel endlabel pTick ptick loggrid SAS
@c  LocalWords:  currentprojection latticeshading subpictures colinear unitcube
@c  LocalWords:  Autoscaling solveQuadratic MidArrow MidArcArrow Prebuilt url
@c  LocalWords:  pdftex commentchar getstring getstringprefix getreal defaultS
@c  LocalWords:  ticklocate autoscaleT autoscaling vectorfield autolimits dvi
@c  LocalWords:  zlimits inline dvipdf hyperdvi autoconf gui zerowindingoverlap
@c  LocalWords:  prepended intMax quadraticroots cubicroots filltype prepend
@c  LocalWords:  ticklabel popup UnFill markroutine marknodes markuniform erf
@c  LocalWords:  intersectpoint cyrillic mathtext russian brokenaxis Datadir
@c  LocalWords:  resetdefaultpen latticeshade axialshade radialshade erfc det
@c  LocalWords:  gouraudshade includegraphics unescaped nmesh nsub surfacepen
@c  LocalWords:  lightgray meshpen localhistory axisT
