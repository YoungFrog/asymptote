\input texinfo   @c -*-texinfo-*-
@setfilename asymptote.info
@settitle asymptote
     
@set VERSION 0.50

@copying
This file documents ASYMPTOTE, version @value{VERSION}.

http://www/asymptote.sourceforge.net
     
Copyright @copyright{} 2004 Andy Hammerlindl, John Bowman, and Tom Prince.
     
@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @acronym{GNU} Free Documentation License,
Version 1.1, or any later version published by the Free Software
Foundation.
@end quotation
@end copying
     
@dircategory Languages
@direntry
* asymptote: (asymptote).		Vector graphics language.
@end direntry

@titlepage
@title Asymptote
@subtitle For version @value{VERSION}
     
@page
@vskip 0pt plus 1filll
@insertcopying
     
@end titlepage
     
@c So the toc is printed at the start.
@contents
     
@ifnottex
@node Top
@top Asymptote
     
@insertcopying
@end ifnottex

@menu
* Description::                 What is Asymptote?
* Installation::                Getting started
* Example::                     A simple example
* Drawing commands::            Four primitive drawing commands
* Interactive mode::            Typing Asymptote commands interactively
* Credits::                     Contributions and acknowledgements
* Index::                       General index

@end menu

@node Description
@chapter Description
@cindex description

Asymptote is powerful script-based vector graphics language that
provides a natural coordinate-based framework for technical drawings,
inspired by MetaPost. Labels and equations are typeset with LaTeX, for
overall document consistency, yielding the same high-quality level of
typesetting that LaTeX provides for scientific text. By default it
produces postscript output, but it can also generate any format that the
excellent ImageMagick package can produce.
     
A major advantage of Asymptote over other graphics packages is
that it is a high-level programming language, as opposed to just a graphics
program: it can therefore exploit the best features of the script
(command-driven) and graphical user interface (GUI) methods for
producing graphs. A rudimentary GUI called xasy is included with the
package that allows one to move script-generated objects
around. To make Asymptote accessible to the average user, this GUI is
currently being developed into a full-fledged interface that can
generate objects directly. However, the script portion of the language
is now ready for general use by users who are willing to learn a few
straightforward Asymptote graphics commands. 

Asymptote is mathematically oriented (e.g. at the lowest levels, one can
use multiplication by complex numbers to do rotations) and uses LaTeX to do the
typesetting of labels. This is an important feature for scientific
applications. It was inspired by an earlier drawing program (with a much weaker
syntax & capabilities) called MetaPost.

Many of the features of Asymptote are written in the Asymptote language
itself. This allows users to easily tailor its behaviour for a particular
application. While the stock version of Asymptote is designed for
mathematics typesetting needs, one can write Asymptote modules that
tailor it to specific applications. A scientific graphing module has
already been written.

Examples of asymptote output and corresponding source code (written in
the Asymptote language) are available at
http://asymptote.sourceforge.net/gallery/

Features of Asymptote graphics language:

@itemize
@item a natural mathematical coordinate-based framework for technical drawings,
inspired by MetaPost

@item TeX labels and equations, for overall document consistency

@item power of a script-based language coupled to the convenience of a GUI

@item can be customized using its own C++-like graphics programming language 

@item sensible defaults for graphical features, with the ability to override

@item makes elegant use of complex numbers and affine transforms

@item a high-level mathematically oriented interface to the postscript language
for vector graphics

@item functions can create new (anonymous) functions

@item uses deferral of drawing commands and the simplex linear
programming method to meet figure size constraints
@end itemize

@node Installation
@chapter Installation
@cindex installation
To install asymptote from release x.xx, execute the following commands:

@example
tar -zxf asymptote-x.xx.tar.gz
cd asymptote
./configure
make
make install
@end example

For a (default) system-wide installation, the last command should be
done as root.

These commands are needed to install the latest development version of
asymptote from cvs (when prompted for the CVS password, type enter): 

@example
cvs -d:pserver:anonymous@@cvs.sourceforge.net:/cvsroot/asymptote login
 
cvs -z3 -d:pserver:anonymous@@cvs.sourceforge.net:/cvsroot/asymptote co asymptote
cd asymptote
./autogen.sh
./configure
make
make install
@end example

In order to run asymptote you will need the boost library (included
in recent Linux distributions). In particular, the boost library
requires the following:

@example
http://dl.sourceforge.net/sourceforge/boost/boost-jam-3.1.10-1.i386.rpm
http://dl.sourceforge.net/sourceforge/boost/boost_1_31_0.tar.bz2
@end example

@node Example
@chapter Example
@cindex example
To draw a line from (0,0) to (100,100) using Asymptote's interactive
mode, type:

@example
asy -V
draw((0,0)--(100,100));
@end example

The units here are postscript "big points" (1 bp = 1/72 in).
The @code{--} here means join with a linear segment.

At this point you can type in further draw commands, which will be added
to the displayed figure, or type @code{quit} to exit interactive mode.
Further commands specific to interactive mode are described in
@ref{Interactive mode}.

You can use the arrow keys in interactive mode to edit previous lines
(assuming that you have the GNU readline library installed on your
system).  Because of interactive mode is emulated, it is currently
intended only for short demonstration files  @xref{Interactive
mode}. For more complicated graphs we recommend using batch mode.

Let's repeat the previous example in batch mode. Simply type in the
commands 
@example
draw((0,0)--(100,100));
shipout();
@end example
into a file, say test.asy. Then execute this file by typing
@example
asy -V test
@end example
The shipout command converts the current picture into a postscript. A
shipout command was added implicitly in interactive mode, but is
explicitly required in batch mode.

The -V option here opens up a gv window so you can immediately view the
postscript output.

One can draw a line with more than two points and create a cyclic path
like this square:

@example
draw((0,0)--(100,0)--(100,100)--(0,100)--cycle);
shipout();
@end example

It is often inconvenient to work directly with postscript coordinates.
This example draws a unit square, scaled to size (100,100). The output
is identical to the previous example. (If you are using interactive mode
ignore the two messages "warning: scaling in picture unbounded"; see
@ref{Interactive mode}, for details).

@example
size(100,100);
draw((0,0)--(1,0)--(1,1)--(0,1)--cycle);
shipout();
@end example

@node Drawing commands
@chapter Drawing commands
@cindex drawing commands
All of Asymptote's graphical capabilities are based on four primitive
drawing commands. While some of these commands take many options, they
all have sensible default values.

@itemize
@item
@example
@cindex @code{draw}
void draw(picture pic=currentpicture, string s="", real angle=0,
  path g, pair align=0, side side=RightSide, pen p=currentpen,
  adjust adjust=NoAdjust, arrowbar arrow=None, arrowbar bar=None,
  string legend="");
@end example

Draw the path g on the picture pic, optionally labeled by
string s, using pen p, and other optional drawing attributes (italic
adjustment, arrows, bars, legend). Only one parameter, the path, is required.

@item
@example
@cindex @code{fill}
void fill(picture pic=currentpicture, path g, pen p=currentpen);
@end example

Fill the interior region bounded by the path g on the picture pic,
using the pen p.

@item
@example
@cindex @code{clip}
void clip(picture pic=currentpicture, path g);
@end example

Clip picture pic to the region bounded by the path g.

@item
@example
@cindex @code{label}
void label(picture pic=currentpicture, string s, real angle=0,
  pair position, pair align=0, pen p=currentpen,
  adjust adjust=NoAdjust);
@end example

Draw label s on pic, writing at the specified angle, at coordinate position,
aligned in the direction align, with pen p (and optional italic adjustment).
@end itemize

@node Interactive mode
@chapter Interactive mode
Because Asymptote as currently designed does not natively support
an interactive mode, interactive mode is currently simulated by
rerunning all previous commands in a new module as each line is typed.
This emulation will eventually become unneccessary, once Asymptote's module
handling is redesigned to support a line-at-a-time mode.

In interactive mode, it is not necessary to type @code{shipout();}
at the end of your commands; a @code{shipout();} command is
automatically appended as each line is entered. This means that you will
get two innocuous warning messages "warning: scaling in picture unbounded"
if you type in a command like @code{size(100,100);} on the first line
(since the current picture, being still empty, cannot be scaled to achieve the
requested size).

The following special commands are supported only in interactive mode:

@itemize
@item @code{quit} exits interactive mode
@item @code{redraw} refeshes the screen
@item @code{reset} resets asymptote to its initial state on entry,
before any commands were typed.
@item @code{Import FILE;} imports the existing Asymptote file FILE, after first
doing a reset. 
@end itemize

Except for the last item, no semicolon should be typed after these
interactive commands.

@node Credits
@chapter Acknowledgements
@cindex acknowledgments

Financial support for the development of Asymptote was generously
provided by the Natural Sciences and Engineering Research Council of
Canada, the Pacific Institute for Mathematical Sciences, and the Faculty of
Science, University of Alberta.
     
We also would like to acknowledge the previous work of John D. Hobby, 
author of the program @code{MetaPost} that inspired the development of
@code{Asymptote}. In turn, @code{MetaPost} was based on Donald E. Knuth's
@code{MetaFont} font generation system, also the author of @TeX{}, so we
would like to thank him as well.

The authors of Asymptote are Andy Hammerlindl, John Bowman, and Tom Prince.
Sean Healy designed the Asymptote logo.

@node Index
@unnumbered Index
     
@printindex cp
     
@bye

